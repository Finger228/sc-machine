{
    "docs": [
        {
            "location": "/",
            "text": "Documentation\n\n\n\n\n\n\nC++ API\n\n\n\n\nCommon\n\n\nKnowledge processing machine\n\n\nMeta programming\n\n\nTemplates\n\n\n\n\n\n\n\n\nDevelopment\n\n\n\n\nPull Request\n\n\nGit workflow\n\n\nCodestyle\n\n\n\n\n\n\n\n\nCommon\n\n\n\n\nConfig\n\n\nSc-element types\n\n\nSCTP protocol\n - description of \nSemantic Code Transport Protocol\n (Russian);\n\n\n\n\n\n\n\n\nBuilding\n\n\n\n\nLinux\n\n\nWindows",
            "title": "Home"
        },
        {
            "location": "/#documentation",
            "text": "C++ API   Common  Knowledge processing machine  Meta programming  Templates     Development   Pull Request  Git workflow  Codestyle     Common   Config  Sc-element types  SCTP protocol  - description of  Semantic Code Transport Protocol  (Russian);     Building   Linux  Windows",
            "title": "Documentation"
        },
        {
            "location": "/build/linux-build/",
            "text": "Build with Ubuntu:\n\n\ngit clone https://github.com/ostis-dev/sc-machine.git\ncd sc-machine\n./scripts/install_deps_ubuntu.sh\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release # use Debug for debug build\nmake",
            "title": "Build on Linux"
        },
        {
            "location": "/build/windows-build/",
            "text": "Build with Visual Studio 2013:\n\n\n\n\ninstall \njre\n\n\ndownlaod source code of \nsc-machine\n.\n\n\nRun cmake for Visual Studio 2013 with param \nCMAKE_PREFIX_PATH=<path to QT>\n. For example: \nCMAKE_PREFIX_PATH=D:\\Qt\\5.5\\msvc2013_64\\)\n\n\nSetup redis for Windows: \nhttps://github.com/MSOpenTech/redis/releases",
            "title": "Build on Windows"
        },
        {
            "location": "/dev/git-workflow/",
            "text": "Initialize\n\n\nTo initialize your repo do:\n * make fork from \nhttps://github.com/ostis-dev/sc-machine\n\n * clone your fork to your machine and prepare\n\n\ngit clone git@github.com:yourlogin/sc-machine.git\ncd sc-machine\ngit config --global user.name \"Your Name\"\ngit config --global user.email youremail@example.com\ngit remote add upstream git@github.com:ostis-dev/sc-machine.git\n\n\n\n\nUpdate\n\n\nTo update your master from \nupstream\n use:\n\n\ngit fetch upstream\ngit checkout master\ngit merge upstream/master\ngit push origin master\n\n\n\n\nRebase\n\n\nTo rebase your branch to master:\n\n\ngit checkout yourbranch\ngit rebase master\n\n\n\n\nIf you have any problems, then:\n* redo\n\n\ngit rebase --abort\n\n\n\n\n\n\nask in \n\n\n\n\n\nCommon rules\n\n\n\n\nuse \ngit rebase\n instead of \nmerge\n. \nMore documentation about this command\n This command just try to apply your commits (from current branch to commits in specified branch)",
            "title": "Git-workflow"
        },
        {
            "location": "/dev/git-workflow/#initialize",
            "text": "To initialize your repo do:\n * make fork from  https://github.com/ostis-dev/sc-machine \n * clone your fork to your machine and prepare  git clone git@github.com:yourlogin/sc-machine.git\ncd sc-machine\ngit config --global user.name \"Your Name\"\ngit config --global user.email youremail@example.com\ngit remote add upstream git@github.com:ostis-dev/sc-machine.git",
            "title": "Initialize"
        },
        {
            "location": "/dev/git-workflow/#update",
            "text": "To update your master from  upstream  use:  git fetch upstream\ngit checkout master\ngit merge upstream/master\ngit push origin master",
            "title": "Update"
        },
        {
            "location": "/dev/git-workflow/#rebase",
            "text": "To rebase your branch to master:  git checkout yourbranch\ngit rebase master  If you have any problems, then:\n* redo  git rebase --abort   ask in",
            "title": "Rebase"
        },
        {
            "location": "/dev/git-workflow/#common-rules",
            "text": "use  git rebase  instead of  merge .  More documentation about this command  This command just try to apply your commits (from current branch to commits in specified branch)",
            "title": "Common rules"
        },
        {
            "location": "/dev/pr/",
            "text": "This page describes rules to create Pull Requests.\n\n\nCommits\n\n\nEach commit message should be formed as: \n[tag1]...[tagN] Message text (#issue)\n\n\nMessage text should start from an upper case letter. If commit doesn't fix or implement any \n#issue\n, then it shouldn't be pointed in commit message\n  Examples:\n\n\n[cpp] Colored log output\n[cpp][test] Add unit test for ScEvent class\n[kpm][search] Relation type check added\n\n\n\nPossible tags:\n\n\n\n\n[cpp]\n - use, when you made changes in cpp wrapper code;\n\n\n[memory]\n - use, when you made changes in c core code;\n\n\n[tests]\n or \n[test]\n - use, when you made changes in tests;\n\n\n[tools]\n - use, when you made changes in tools;\n\n\n[builder]\n - use, when you made changes in builder tools;\n\n\n[codegen]\n - use, when you made changes in code generator;\n\n\n[review]\n - use, when you made commit with review fixes;\n\n\n[refactor]\n - use, when you made commit with some code refactoring;\n\n\n[changelog]\n - use, when you update changelog;\n\n\n[docs]\n - use, when you update documentation;\n\n\n[python]\n - use, when you made commit with python module changes.\n\n\n\n\n\n\nEach commit in Pull request should be an atomic. Another word implement or fix one feature. For example:\n\n\nLat commit\n...\n[cpp] Colored log output\n[cpp] Add class to work with console\n...\nInit commit\n\n\n\nIn this example we add class to work with console (where implemented colored output), then \nin another commit\n we had implementation of colored log output\n\n\n\n\nEach commit should have not much differences excluding cases, with:\n\n\n\n\nCodeStyle changes;\n\n\nRenames;\n\n\nCode formating;\n\n\n\n\nDo atomic commits for each changes.\n For example if you rename some members in \nClassX\n and \nClassY\n, then do two commits:\n\n\n[refactor] Rename members in ClassX according to codestyle\n[refactor] Rename members in ClassY according to codestyle\n\n\n\nDo not mix codestyle changes and any logical fixes in one commit\n\n\n\n\nAll commit, that not applies to this rules, should be split by this rules. Another way they will be rejected with Pull request.\n\n\nPull request\n\n\nEach pull request with many changes, that not possible to review (excluding codestyle, rename changes), will be rejected.\n\n\n\n\nFor each pull request you should do:\n\n\n\n\nupdate \ndocs/changelog.md\n file according to your commits\n\n\nensure prepare updates for documentation\n\n\ncover new functionality \nby tests\n\n\nyour code should be written according to a \ncodestyle\n\n\n\n\n\n\nAfter prepare pull request an automation tests will run on it. If any test doesn't passed, then pull request couldn't be merged and you should to fix it.\n\n\n\n\nAll review or other fixes to pull request should be appended as new commits to it",
            "title": "Pull requets"
        },
        {
            "location": "/dev/pr/#commits",
            "text": "Each commit message should be formed as:  [tag1]...[tagN] Message text (#issue)  Message text should start from an upper case letter. If commit doesn't fix or implement any  #issue , then it shouldn't be pointed in commit message\n  Examples: \n[cpp] Colored log output\n[cpp][test] Add unit test for ScEvent class\n[kpm][search] Relation type check added  Possible tags:   [cpp]  - use, when you made changes in cpp wrapper code;  [memory]  - use, when you made changes in c core code;  [tests]  or  [test]  - use, when you made changes in tests;  [tools]  - use, when you made changes in tools;  [builder]  - use, when you made changes in builder tools;  [codegen]  - use, when you made changes in code generator;  [review]  - use, when you made commit with review fixes;  [refactor]  - use, when you made commit with some code refactoring;  [changelog]  - use, when you update changelog;  [docs]  - use, when you update documentation;  [python]  - use, when you made commit with python module changes.    Each commit in Pull request should be an atomic. Another word implement or fix one feature. For example: \nLat commit\n...\n[cpp] Colored log output\n[cpp] Add class to work with console\n...\nInit commit  In this example we add class to work with console (where implemented colored output), then  in another commit  we had implementation of colored log output   Each commit should have not much differences excluding cases, with:   CodeStyle changes;  Renames;  Code formating;   Do atomic commits for each changes.  For example if you rename some members in  ClassX  and  ClassY , then do two commits: \n[refactor] Rename members in ClassX according to codestyle\n[refactor] Rename members in ClassY according to codestyle  Do not mix codestyle changes and any logical fixes in one commit   All commit, that not applies to this rules, should be split by this rules. Another way they will be rejected with Pull request.",
            "title": "Commits"
        },
        {
            "location": "/dev/pr/#pull-request",
            "text": "Each pull request with many changes, that not possible to review (excluding codestyle, rename changes), will be rejected.   For each pull request you should do:   update  docs/changelog.md  file according to your commits  ensure prepare updates for documentation  cover new functionality  by tests  your code should be written according to a  codestyle    After prepare pull request an automation tests will run on it. If any test doesn't passed, then pull request couldn't be merged and you should to fix it.   All review or other fixes to pull request should be appended as new commits to it",
            "title": "Pull request"
        },
        {
            "location": "/dev/codestyle/",
            "text": "C++ Style Guide\n\n\nIn general, \nGoogle's coding standard\n is used, and we strongly encourage to read it.\n\n\nBelow are our specific (but not all!) exceptions to the Google's coding standard:\n\n\n\n\nAll code should conform to C++11 standard\n\n\nWe use \n.cpp\n and \n.hpp\n files, not \n.cc\n and \n.h\n (\n.c\n and \n.h\n are used for C code), in UTF-8 encoding.\n\n\nFile names are lowercase with underscores, like \nsc_memory.cpp\n.\n\n\nWe use \n#pragma once\n instead of the \n#define\n Guard in header files.\n\n\nIncludes are sorted and grouped by directory, there should be newlines between different directories.\n\n\nOrder of directories in includes: \"current_dir/current_file.hpp\", other includes from the same dir, includes from other dirs sorted by name.\n\n\n\n\n#include \"../test.hpp\"\n\n#include \"hash/hmac.h\"\n#include \"hash/sha256.h\"\n\n#include \"sc-memory/cpp/sc_wait.hpp\"\n#include \"sc-memory/cpp/kpm/sc_agent.hpp\"\n\n#include <curl/curl.h>\n\n#include <rapidjson/document.h>\n#include <rapidjson/stringbuffer.h>\n#include <rapidjson/writer.h>\n\n\n\n\n\n\nWe ARE using C++ exceptions.\n\n\nWe are using all features of C++11.\n\n\n\n\nNaming and formatting\n\n\n\n\nWe ALWAYS use two spaces indent and don't use tabs. \nIf you see old formated file, then change format of it in separated commit.\n\n\nWe don't have hardcoded line width, but keep it reasonable to fit on the screen.\n\n\nDoxygen-style comments can be used.\n\n\nUnderscores are allowed only in prefixes for member variables and namespace names, like \nint m_keynodeAddr; namespace sc_utils\n.\n\n\nDon't use \nusing namespace std\n or other namepsaces globaly. You can use them localy in test cpp files or functions.\n\n\nUse right-to-left order for variables/params: \nScAddr const & addr\n (reference to the const \nScAddr\n).\n\n\nIn one line \nif\n, \nfor\n, \nwhile\n we do not use brackets. If one line \nfor\n or \nwhile\n is combined with one line \nif\n, do use brackets for cycle.\n\n\n\n\nfor (ScAddr const & addr : listOfAddr)\n  ctx.EraseElement(addr);\n\n...\n\nfor (ScAddr const & addr : listOfAddr)\n{\n  if (addr.IsValid())\n    return true;\n}\n\n\n\n\n\n\nSpace after the keyword in conditions and loops. Space after \n;\n in \nfor\n loop.\n\n\nSpace between binary operators: \nx = y * y + z * z\n.\n\n\nSpace after double dash \nx = isValid ? 2 : 1;\n.\n\n\nWe use \nusing\n keyword instead of \ntypedef\n.\n\n\nCompile-time constants must be named in camelCase, starting with a lower-case \nk\n, e.g. \nkCompileTimeConstant\n and marked as \nconstexpr\n when possible.\n\n\nValues of enum classes must be named in CamelCase, e.g. \nenum class Color { Red, Green, LightBlue };\n.\n\n\n\n\nMacros and C-style enums must be named in UPPER_CASE, and enum values must be prefixed with a capitalized enum name.\n\n\nNote that macros complicate debugging, and old-style enums have dangerous implicit conversions to integers, and tend to clutter\ncontaining namespaces. Avoid them when possible - use \nconst\n or \nconstexpr\n instead of macros, and enum classes instead of enums.\n\n\n\n\n\n\nCode should compile without warnings!. Just deprecated warning could be present for a short time. But if you see them, then try to fix it in a separate commit\n\n\nClangFormat\n\n\nMost of our coding style is specified in a configuration file for \nClangFormat\n.\nTo automatically format a file, install \nclang-format\n and run:\n\n\nclang-format -i file.cpp file.hpp other_file.cpp\n\n\n\nFormatting Example/Guide/Reference\n\n\n#pragma once\n\n#include \"sc_addr.hpp\"\n\nuint16_t constexpr kBufferSize = 255;\n\n// C-style enums are ALL_CAPS. But remember that C++11 enum classes are preferred.\nenum Type\n{\n  TYPE_INTEGER,\n  TYPE_FLOAT,\n  TYPE_STRING\n};\n\nusing TMyTypeStartsWithCapitalTLetter = double;\n\nclass ComplexClass\n{\npublic:\n  Complex(double rePart, double imPart) : m_re(rePart), m_im(imPart) {}\n  double Modulus() const\n  {\n    double const rere = m_re * m_re;\n    double const imim = m_im * m_im;\n    return sqrt(rere + imim);\n  }\n  double OneLineMethod() const { return m_re; }\nprivate:\n  // We use m_ prefix for member variables.\n  double m_re;\n  double m_im;\n};\n\nnamespace\n{\nvoid CamelCaseFunctionName(int lowerCamelCaseVar)\n{\n  static int counter = 0;\n  counter += lowerCamelCaseVar;\n}\n}  // namespace\n\nnamespace lower_case\n{\ntemplate <class TTemplateTypeStartsWithCapitalTLetter>\nvoid SomeFoo(int a, int b,\n             TTemplateTypeStartsWithCapitalTLetter /* We avoid compilation warnings. */)\n{\n  for (int i = 0; i < a; ++i)\n  {\n    // IMPORTANT! We DON'T use one-liners for if statements for easier debugging.\n    // The following syntax is invalid: if (i < b) Bar(i);\n    if (i < b)\n      Bar(i);\n    else\n    {\n      Bar(i);\n      Bar(b);\n      // Commented out the call.\n      // Bar(c);\n    }\n  }\n}\n}  // namespace lower_case\n\n// Switch formatting.\nint Foo(int a)\n{\n  switch (a)\n  {\n  case 1:\n    Bar(1);\n    break;\n  case 2:\n  {\n    Bar(2);\n    break;\n  }\n  case 3:\n  default:\n    Bar(3);\n    break;\n  }\n  return 0;\n}\n\n// Loops formatting.\n\nif (condition)\n  foo();\nelse\n  bar();\n\nif (condition)\n{\n  if (condition)\n    foo();\n  else\n    bar();\n}\n\nfor (size_t i = 0; i < size; ++i)\n  foo(i);\n\nwhile (true)\n{\n  if (condition)\n    break;\n}\n\n// Space after the keyword.\nif (condition)\n{\n}\n\nfor (size_t i = 0; i < 5; ++i)\n{\n}\n\nwhile (condition)\n{\n}\n\nswitch (i)\n{\n}\n\n// Space between operators, and don't use space between unary operator and expression.\nx = 0;\nx = -5;\n++x;\nx--;\nx *= 5;\nif (x && !y)\n{\n}\nv = w * x + y / z;\nv = w * (x + z);\n\n// Space after double dash. And full sentences in comments.\n\n\n\n\nTips and Hints\n\n\n\n\nIf you see outdated code which can be improved - DO IT NOW (but in the separate pull request).\n\n\nYour code should work at least on [mac|win|linux][x86|x86_64] [android|ios] platforms.\n\n\nYour code should compile well with gcc 4.8+ and clang 3.5+\n\n\nTry to avoid using any new 3party library if it is not fully tested and supported on supported platforms.\n\n\nCover your code with unit tests.\n\n\nIf you don't have enough time to make it right, leave a \n// TODO(DeveloperName): need to fix it\n comment.\n\n\n\n\nSome useful macros:\n\n\n\n\nmacroses to check compilation platform\n\n\n\n\n#if SC_IS_PLATFORM_WIN32\n  // windows platform\n#endif\n\n#if SC_IS_PLATFORM_LINUX\n // linux platform\n#endif\n#if SC_IS_PLATFORM_MAC\n // OSX (mac) platform\n#endif\n\n#if SC_IS_PLATFORM_IOS\n // iOS platform\n#endif\n\n#if SC_IS_PLATFORM_ANDROID\n // android platform\n#endif\n\n\n\n\n\n\nCheck code in runtime for Debug builds:\n\n\n\n\nSC_ASSERT(expr, (\"message\"));\nSC_ASSERT(expr, ()); // no message\n\n\n\n\n\n\nCheck if code compiles in Debug mode:\n\n\n\n\n#if SC_DEBUG_MODE\n // compiles in debug\n#endif\n\n\n\n\n\n\nCheck code in runtime for any type of build. Prefer \nSC_CHECK_...\n to \nSC_CHECK\n:\n\n\n\n\nSC_CHECK(expr, (\"message\"));\nSC_CHECK(expr, ()); // no message\n\nSC_CHECK_NOT(expr, ()); // equal to SC_CHECK(!expr, ());\nSC_CHECK_EQUAL(a, b, ()); // equal to SC_CHECK(a == b, ());\nSC_CHECK_NOT_EQUAL(a, b, ()); // equal to SC_CHECK(a != b, ());\nSC_CHECK_GREAT(a, b, ()); // equal to SC_CHECK(a > b, ());\nSC_CHECK_GREAT_EQ(a, b, ()); // equal to SC_CHECK(a >= b, ());\nSC_CHECK_LESS(a, b, ()); // equal to SC_CHECK(a < b, ());\nSC_CHECK_LESS_EQ(a, b, ()); // equal to SC_CHECK(a <= b, ());\n\n\n\n\n\n\nLogging:\n\n\nSC_LOG_DEBUG(msg)\n - print message in Debug builds. Prefix: \n[Debug]\n\n\nSC_LOG_INFO(msg)\n\n\nSC_LOG_WARNING(msg)\n\n\nSC_LOG_ERROR(msg)\n\n\n\n\nSC_LOG_INFO_COLOR(msg, color)\n - print colored info message. Look color constants in \nScConsole::Color\n\n\n\n\n\n\nDeclare your own exceptions:\n\n\n\n\n\n\nclass MyException final : public ScException\n{\npublic:\n    explicit MyException(std::string const & msg) : ScException(\"My: \" + msg) {}\n};\n\n\n\n\n\n\nThrow exceptions with \nSC_THROW_EXCEPTION(exceptionName, message)\n:\n\n\n\n\nSC_THROW_EXCEPTION(MyException, \"my message\")\n\n\n\n\n\n\nException for a non implemented parts of code\n\n\n\n\nSC_NOT_IMPLEMENTED(\"message\")",
            "title": "Codestyle"
        },
        {
            "location": "/dev/codestyle/#c-style-guide",
            "text": "In general,  Google's coding standard  is used, and we strongly encourage to read it.  Below are our specific (but not all!) exceptions to the Google's coding standard:   All code should conform to C++11 standard  We use  .cpp  and  .hpp  files, not  .cc  and  .h  ( .c  and  .h  are used for C code), in UTF-8 encoding.  File names are lowercase with underscores, like  sc_memory.cpp .  We use  #pragma once  instead of the  #define  Guard in header files.  Includes are sorted and grouped by directory, there should be newlines between different directories.  Order of directories in includes: \"current_dir/current_file.hpp\", other includes from the same dir, includes from other dirs sorted by name.   #include \"../test.hpp\"\n\n#include \"hash/hmac.h\"\n#include \"hash/sha256.h\"\n\n#include \"sc-memory/cpp/sc_wait.hpp\"\n#include \"sc-memory/cpp/kpm/sc_agent.hpp\"\n\n#include <curl/curl.h>\n\n#include <rapidjson/document.h>\n#include <rapidjson/stringbuffer.h>\n#include <rapidjson/writer.h>   We ARE using C++ exceptions.  We are using all features of C++11.   Naming and formatting   We ALWAYS use two spaces indent and don't use tabs.  If you see old formated file, then change format of it in separated commit.  We don't have hardcoded line width, but keep it reasonable to fit on the screen.  Doxygen-style comments can be used.  Underscores are allowed only in prefixes for member variables and namespace names, like  int m_keynodeAddr; namespace sc_utils .  Don't use  using namespace std  or other namepsaces globaly. You can use them localy in test cpp files or functions.  Use right-to-left order for variables/params:  ScAddr const & addr  (reference to the const  ScAddr ).  In one line  if ,  for ,  while  we do not use brackets. If one line  for  or  while  is combined with one line  if , do use brackets for cycle.   for (ScAddr const & addr : listOfAddr)\n  ctx.EraseElement(addr);\n\n...\n\nfor (ScAddr const & addr : listOfAddr)\n{\n  if (addr.IsValid())\n    return true;\n}   Space after the keyword in conditions and loops. Space after  ;  in  for  loop.  Space between binary operators:  x = y * y + z * z .  Space after double dash  x = isValid ? 2 : 1; .  We use  using  keyword instead of  typedef .  Compile-time constants must be named in camelCase, starting with a lower-case  k , e.g.  kCompileTimeConstant  and marked as  constexpr  when possible.  Values of enum classes must be named in CamelCase, e.g.  enum class Color { Red, Green, LightBlue }; .   Macros and C-style enums must be named in UPPER_CASE, and enum values must be prefixed with a capitalized enum name.  Note that macros complicate debugging, and old-style enums have dangerous implicit conversions to integers, and tend to clutter\ncontaining namespaces. Avoid them when possible - use  const  or  constexpr  instead of macros, and enum classes instead of enums.    Code should compile without warnings!. Just deprecated warning could be present for a short time. But if you see them, then try to fix it in a separate commit",
            "title": "C++ Style Guide"
        },
        {
            "location": "/dev/codestyle/#clangformat",
            "text": "Most of our coding style is specified in a configuration file for  ClangFormat .\nTo automatically format a file, install  clang-format  and run:  clang-format -i file.cpp file.hpp other_file.cpp",
            "title": "ClangFormat"
        },
        {
            "location": "/dev/codestyle/#formatting-exampleguidereference",
            "text": "#pragma once\n\n#include \"sc_addr.hpp\"\n\nuint16_t constexpr kBufferSize = 255;\n\n// C-style enums are ALL_CAPS. But remember that C++11 enum classes are preferred.\nenum Type\n{\n  TYPE_INTEGER,\n  TYPE_FLOAT,\n  TYPE_STRING\n};\n\nusing TMyTypeStartsWithCapitalTLetter = double;\n\nclass ComplexClass\n{\npublic:\n  Complex(double rePart, double imPart) : m_re(rePart), m_im(imPart) {}\n  double Modulus() const\n  {\n    double const rere = m_re * m_re;\n    double const imim = m_im * m_im;\n    return sqrt(rere + imim);\n  }\n  double OneLineMethod() const { return m_re; }\nprivate:\n  // We use m_ prefix for member variables.\n  double m_re;\n  double m_im;\n};\n\nnamespace\n{\nvoid CamelCaseFunctionName(int lowerCamelCaseVar)\n{\n  static int counter = 0;\n  counter += lowerCamelCaseVar;\n}\n}  // namespace\n\nnamespace lower_case\n{\ntemplate <class TTemplateTypeStartsWithCapitalTLetter>\nvoid SomeFoo(int a, int b,\n             TTemplateTypeStartsWithCapitalTLetter /* We avoid compilation warnings. */)\n{\n  for (int i = 0; i < a; ++i)\n  {\n    // IMPORTANT! We DON'T use one-liners for if statements for easier debugging.\n    // The following syntax is invalid: if (i < b) Bar(i);\n    if (i < b)\n      Bar(i);\n    else\n    {\n      Bar(i);\n      Bar(b);\n      // Commented out the call.\n      // Bar(c);\n    }\n  }\n}\n}  // namespace lower_case\n\n// Switch formatting.\nint Foo(int a)\n{\n  switch (a)\n  {\n  case 1:\n    Bar(1);\n    break;\n  case 2:\n  {\n    Bar(2);\n    break;\n  }\n  case 3:\n  default:\n    Bar(3);\n    break;\n  }\n  return 0;\n}\n\n// Loops formatting.\n\nif (condition)\n  foo();\nelse\n  bar();\n\nif (condition)\n{\n  if (condition)\n    foo();\n  else\n    bar();\n}\n\nfor (size_t i = 0; i < size; ++i)\n  foo(i);\n\nwhile (true)\n{\n  if (condition)\n    break;\n}\n\n// Space after the keyword.\nif (condition)\n{\n}\n\nfor (size_t i = 0; i < 5; ++i)\n{\n}\n\nwhile (condition)\n{\n}\n\nswitch (i)\n{\n}\n\n// Space between operators, and don't use space between unary operator and expression.\nx = 0;\nx = -5;\n++x;\nx--;\nx *= 5;\nif (x && !y)\n{\n}\nv = w * x + y / z;\nv = w * (x + z);\n\n// Space after double dash. And full sentences in comments.",
            "title": "Formatting Example/Guide/Reference"
        },
        {
            "location": "/dev/codestyle/#tips-and-hints",
            "text": "If you see outdated code which can be improved - DO IT NOW (but in the separate pull request).  Your code should work at least on [mac|win|linux][x86|x86_64] [android|ios] platforms.  Your code should compile well with gcc 4.8+ and clang 3.5+  Try to avoid using any new 3party library if it is not fully tested and supported on supported platforms.  Cover your code with unit tests.  If you don't have enough time to make it right, leave a  // TODO(DeveloperName): need to fix it  comment.",
            "title": "Tips and Hints"
        },
        {
            "location": "/dev/codestyle/#some-useful-macros",
            "text": "macroses to check compilation platform   #if SC_IS_PLATFORM_WIN32\n  // windows platform\n#endif\n\n#if SC_IS_PLATFORM_LINUX\n // linux platform\n#endif\n#if SC_IS_PLATFORM_MAC\n // OSX (mac) platform\n#endif\n\n#if SC_IS_PLATFORM_IOS\n // iOS platform\n#endif\n\n#if SC_IS_PLATFORM_ANDROID\n // android platform\n#endif   Check code in runtime for Debug builds:   SC_ASSERT(expr, (\"message\"));\nSC_ASSERT(expr, ()); // no message   Check if code compiles in Debug mode:   #if SC_DEBUG_MODE\n // compiles in debug\n#endif   Check code in runtime for any type of build. Prefer  SC_CHECK_...  to  SC_CHECK :   SC_CHECK(expr, (\"message\"));\nSC_CHECK(expr, ()); // no message\n\nSC_CHECK_NOT(expr, ()); // equal to SC_CHECK(!expr, ());\nSC_CHECK_EQUAL(a, b, ()); // equal to SC_CHECK(a == b, ());\nSC_CHECK_NOT_EQUAL(a, b, ()); // equal to SC_CHECK(a != b, ());\nSC_CHECK_GREAT(a, b, ()); // equal to SC_CHECK(a > b, ());\nSC_CHECK_GREAT_EQ(a, b, ()); // equal to SC_CHECK(a >= b, ());\nSC_CHECK_LESS(a, b, ()); // equal to SC_CHECK(a < b, ());\nSC_CHECK_LESS_EQ(a, b, ()); // equal to SC_CHECK(a <= b, ());   Logging:  SC_LOG_DEBUG(msg)  - print message in Debug builds. Prefix:  [Debug]  SC_LOG_INFO(msg)  SC_LOG_WARNING(msg)  SC_LOG_ERROR(msg)   SC_LOG_INFO_COLOR(msg, color)  - print colored info message. Look color constants in  ScConsole::Color    Declare your own exceptions:    class MyException final : public ScException\n{\npublic:\n    explicit MyException(std::string const & msg) : ScException(\"My: \" + msg) {}\n};   Throw exceptions with  SC_THROW_EXCEPTION(exceptionName, message) :   SC_THROW_EXCEPTION(MyException, \"my message\")   Exception for a non implemented parts of code   SC_NOT_IMPLEMENTED(\"message\")",
            "title": "Some useful macros:"
        },
        {
            "location": "/dev/test/",
            "text": "Carete unit test\n\n\nTo append new unit test, you should create file \nsc-memory/test/wrap/units/test_my.cpp\n with base content\n\n\n/*\n* This source file is part of an OSTIS project. For the latest info, see http://ostis.net\n* Distributed under the MIT License\n* (See accompanying file COPYING.MIT or copy at http://opensource.org/licenses/MIT)\n*/\n\n#include \"sc-memory/cpp/utils/sc_test.hpp\"\n\nUNIT_TEST(my_test_name)\n{\n  ScMemoryContext ctx(sc_access_lvl_make_min, \"my_test_name\");\n\n  /* There you should implement your test logic.\n   * Use SC_CHECK_.. functions for check test results\n   */\n\n   SUBTEST_START(my_subtest_name)\n   {\n     /* There you can implement simple subtest.\n      * For example check the same data, but with some another logic.\n      */\n   }\n   SUBTEST_END()\n\n   SUBTEST_START(my_subtest_name_2)\n   {\n     // You can implement as many as you want subtests\n   }\n   SUBTEST_END()\n}\n\nUNIT_TEST(me_test_name_2)\n{\n  // You can implement as many as you want tests\n}\n\n\n\n\nFor example you can see any test in \nsc-memory/test/wrap/units/\n folder.\n\n\nTODO:\n how to create automation tests for another project",
            "title": "Unit tests"
        },
        {
            "location": "/dev/test/#carete-unit-test",
            "text": "To append new unit test, you should create file  sc-memory/test/wrap/units/test_my.cpp  with base content  /*\n* This source file is part of an OSTIS project. For the latest info, see http://ostis.net\n* Distributed under the MIT License\n* (See accompanying file COPYING.MIT or copy at http://opensource.org/licenses/MIT)\n*/\n\n#include \"sc-memory/cpp/utils/sc_test.hpp\"\n\nUNIT_TEST(my_test_name)\n{\n  ScMemoryContext ctx(sc_access_lvl_make_min, \"my_test_name\");\n\n  /* There you should implement your test logic.\n   * Use SC_CHECK_.. functions for check test results\n   */\n\n   SUBTEST_START(my_subtest_name)\n   {\n     /* There you can implement simple subtest.\n      * For example check the same data, but with some another logic.\n      */\n   }\n   SUBTEST_END()\n\n   SUBTEST_START(my_subtest_name_2)\n   {\n     // You can implement as many as you want subtests\n   }\n   SUBTEST_END()\n}\n\nUNIT_TEST(me_test_name_2)\n{\n  // You can implement as many as you want tests\n}  For example you can see any test in  sc-memory/test/wrap/units/  folder.  TODO:  how to create automation tests for another project",
            "title": "Carete unit test"
        },
        {
            "location": "/cpp/cpp-meta/",
            "text": "There is a code generator that allows to create some common code by using metadata. It runs before code compilation and generate files with a name \n<header_name>.generated.<header_extension>\n.\nFor example if you run it for a file \ntext.h\n it would produce a file \ntext.generated.h\n\n\nTo make a metadata for you code you can use this set of macros:\n\n \nSC_CLASS\n - allows you to specify metadata for a class;\n\n \nSC_GENERATED_BODY\n - macros that need to be used after \nSC_CLASS\n, because it would be replaced in during compilation time with generated declaration for this class;\n* \nSC_PROPERTY\n - allows to specify metadata for members of a class (including static members).\n\n\n\n\nYou should to specify \nSC_CLASS\n and \nSC_GENERATED_BODY\n for all child classes of \nScObject\n\n\n\n\nSyntax\n\n\nThere is a syntax rule that used for a metadata specification:\n\n\n[<PropertyName> [ (<PropertyValue>, <PropertyValue>, ...) ] ], \u2026\n\n\n\n\nFor example:\n\n\nSC_CLASS(Agent, CmdClass(\"command_update_power_usage\"))\n\n\n\n\nSC_CLASS(CmdClass(\"command_generate_text_from_template\"), Agent)\n\n\n\n\nSC_PROPERTY(Keynode(\"nrel_real_energy_usage\"), ForceCreate)\n\n\n\n\nSC_CLASS(Agent, Event(ActionManager::msActionPeriodical, SC_EVENT_ADD_OUTPUT_ARC))\n\n\n\n\nYou should to use \nSC_CLASS\n and \nSC_GENERATED_BODY\n in class declaration:\n\n\nclass AWhoAreYouAgent : public ScAgentAction\n{\n SC_CLASS(Agent, CmdClass(\"command_who_are_you\"))\n SC_GENERATED_BODY()\n};\n\n\n\n\nClasses\n\n\nTable of available properties of class metadata (\nSC_CLASS\n):\n\n\n\n  \n\n    \nProperty\n\n    \nDescription\n\n  \n\n  \n\n    \nAgent\n\n    \nParent class:\n ScAgent and all childs\n      \nYou should always use it for all \nScAgent\n child classes\n    \n\n  \n\n\n  \n\n    \nCmdClass\n\n    \nDetermine system identifier of command class that implemented by sc-agent.\n    \nParent class:\n ScAgentAction\n    \nArguments:\n\n    \n\n      \nSystem identifier of command class.\n\n    \n\n    \n\n    \n\nclass AAddContentAgent : public ScAgentAction\n{\n SC_CLASS(Agent, CmdClass(\"command_add_content\"))\n SC_GENERATED_BODY()\n};\n    \n\n    \n\n  \n\n\n  \n\n    \nEvent\n\n    \nSpecify condition to start sc-agent implementation.\n\n      \nParent class:\n ScAgent\n      \nArguments:\n\n      \n\n        \nScAddr\n of element which will be used to subscribe for an event;\n\n        \nScEventType\n type of event to subscribe.\n\n      \n\n      Another words, we specify sc-element and event on it, that runs implementation of sc-agent. Possible event types:\n      \n\n        \nSC_EVENT_ADD_OUTPUT_ARC\n\n        \nSC_EVENT_ADD_INPUT_ARC\n\n        \nSC_EVENT_REMOVE_OUTPUT_ARC\n\n        \nSC_EVENT_REMOVE_INPUT_ARC\n\n        \nSC_EVENT_REMOVE_ELEMENT\n\n        \nSC_EVENT_CONTENT_CHANGED\n\n      \n\n      \n\n      \n\nclass ANewPeriodicalActionAgent : public ScAgent\n{\n SC_CLASS(Agent, Event(msActionPeriodical, SC_EVENT_ADD_OUTPUT_ARC))\n SC_GENERATED_BODY()\n};\n      \n\n    \n\n  \n\n\n  \n\n    \nLoadOrder\n\n    \nSpecify order (priority) of module loading. Can be used just in ScModule child classes.\n      \nParent class:\n ScModule\n      \nArguments:\n\n      \n\n        \nPriority as \nunsigned int\n number\n\n      \n\n      System loads modules by ascending order. If two module has an equal load order, then they can load in any order (relative to each other).\n      \n\n      \n\nclass nlModule : public ScModule\n{\n SC_CLASS(LoadOrder(11))\n SC_GENERATED_BODY()\n\n sc_result initializeImpl();\n sc_result shutdownImpl();\n};\n      \n\n    \n\n  \n\n\n\n\n\nMembers\n\n\nTable of available properties of class members metadata (\nSC_PROPERTY\n):\n\n\n\n\n    \nProperty\n\n    \nDescription\n\n  \n\n\n\n    \nKeynode\n\n    \n\n      \nArguments:\n\n      \n\n        \nString with system identifier of sc-element.\n\n      \n\n      Specify that this member is a keynode. After module starts, this member will contains \nScAddr\n of specified sc-element or invalid \nScAddr\n if sc-element not found. Just add \nForceCreate\n to create sc-element in case when it didn't found.\n      \nYou can use this property just for members that has \nScAddr\n type.\n      \n\n      \n\nSC_PROPERTY(Keynode(\"device\"), ForceCreate)\nstatic ScAddr m_device;\n      \n\n    \n\n  \n\n\n\n    \nTemplate\n\n    \n\n      \nArguments:\n\n      \n\n        \nString system identifier of template sc-structure in sc-memory\n\n      \n\n      Specify that this member is a template. After module starts, this template will be parsed from sc-memory. So you will be able use it to search/generate constructions.\n      \nYou can use this property just for members that has \nScTemplate\n type.\n      \n\n      \n\nSC_PROPERTY(Template(\"test_template\"))\nScTemplate m_testTemplate;\n      \n\n    \n\n  \n\n\n\n    \nForceCreate\n\n    \n\n      \nArguments:\n\n      \n\n        \n[\noptional\n] type of sc-element. Any value from \nScType::Node...\n\n      \n\n      \nUsed just with \nKeynode\n property. Using of this property force sc-element creation, if it didn't found by system identifier.\n      \n\n      \n\nSC_PROPERTY(Keynode(\"device\"), ForceCreate(ScType::NodeConstClass))\nstatic ScAddr m_device;\n\n\nSC_PROPERTY(Keynode(\"device\"), ForceCreate) // default value ScType::Node\nstatic ScAddr m_node;\n      \n\n    \n\n  \n\n\n\n\n\nFAQ\n\n\n\n\nHow to include one \nMyObject\n into \nOtherObject\n\n\n\n\n/* In CPP file you should include header file for object, that implemented in this file\n * For example in file MyObject.cpp we should make order\n */\n#include \"otherObject.hpp\"\n#include \"otherObject2.hpp\"\n...\n\n#include \"myObject.hpp\"\n\n// other includes (that doesn't contains ScObject derived classes)\n...\n\n// Implementation\n...",
            "title": "Meta programming"
        },
        {
            "location": "/cpp/cpp-meta/#syntax",
            "text": "There is a syntax rule that used for a metadata specification:  [<PropertyName> [ (<PropertyValue>, <PropertyValue>, ...) ] ], \u2026  For example:  SC_CLASS(Agent, CmdClass(\"command_update_power_usage\"))  SC_CLASS(CmdClass(\"command_generate_text_from_template\"), Agent)  SC_PROPERTY(Keynode(\"nrel_real_energy_usage\"), ForceCreate)  SC_CLASS(Agent, Event(ActionManager::msActionPeriodical, SC_EVENT_ADD_OUTPUT_ARC))  You should to use  SC_CLASS  and  SC_GENERATED_BODY  in class declaration:  class AWhoAreYouAgent : public ScAgentAction\n{\n SC_CLASS(Agent, CmdClass(\"command_who_are_you\"))\n SC_GENERATED_BODY()\n};",
            "title": "Syntax"
        },
        {
            "location": "/cpp/cpp-meta/#classes",
            "text": "Table of available properties of class metadata ( SC_CLASS ):  \n   \n     Property \n     Description \n   \n   \n     Agent \n     Parent class:  ScAgent and all childs\n       You should always use it for all  ScAgent  child classes\n     \n   \n\n   \n     CmdClass \n     Determine system identifier of command class that implemented by sc-agent.\n     Parent class:  ScAgentAction\n     Arguments: \n     \n       System identifier of command class. \n     \n     \n     \nclass AAddContentAgent : public ScAgentAction\n{\n SC_CLASS(Agent, CmdClass(\"command_add_content\"))\n SC_GENERATED_BODY()\n};\n     \n     \n   \n\n   \n     Event \n     Specify condition to start sc-agent implementation. \n       Parent class:  ScAgent\n       Arguments: \n       \n         ScAddr  of element which will be used to subscribe for an event; \n         ScEventType  type of event to subscribe. \n       \n      Another words, we specify sc-element and event on it, that runs implementation of sc-agent. Possible event types:\n       \n         SC_EVENT_ADD_OUTPUT_ARC \n         SC_EVENT_ADD_INPUT_ARC \n         SC_EVENT_REMOVE_OUTPUT_ARC \n         SC_EVENT_REMOVE_INPUT_ARC \n         SC_EVENT_REMOVE_ELEMENT \n         SC_EVENT_CONTENT_CHANGED \n       \n       \n       \nclass ANewPeriodicalActionAgent : public ScAgent\n{\n SC_CLASS(Agent, Event(msActionPeriodical, SC_EVENT_ADD_OUTPUT_ARC))\n SC_GENERATED_BODY()\n};\n       \n     \n   \n\n   \n     LoadOrder \n     Specify order (priority) of module loading. Can be used just in ScModule child classes.\n       Parent class:  ScModule\n       Arguments: \n       \n         Priority as  unsigned int  number \n       \n      System loads modules by ascending order. If two module has an equal load order, then they can load in any order (relative to each other).\n       \n       \nclass nlModule : public ScModule\n{\n SC_CLASS(LoadOrder(11))\n SC_GENERATED_BODY()\n\n sc_result initializeImpl();\n sc_result shutdownImpl();\n};",
            "title": "Classes"
        },
        {
            "location": "/cpp/cpp-meta/#members",
            "text": "Table of available properties of class members metadata ( SC_PROPERTY ):  \n     Property \n     Description \n    \n     Keynode \n     \n       Arguments: \n       \n         String with system identifier of sc-element. \n       \n      Specify that this member is a keynode. After module starts, this member will contains  ScAddr  of specified sc-element or invalid  ScAddr  if sc-element not found. Just add  ForceCreate  to create sc-element in case when it didn't found.\n       You can use this property just for members that has  ScAddr  type.\n       \n       \nSC_PROPERTY(Keynode(\"device\"), ForceCreate)\nstatic ScAddr m_device;\n       \n     \n    \n     Template \n     \n       Arguments: \n       \n         String system identifier of template sc-structure in sc-memory \n       \n      Specify that this member is a template. After module starts, this template will be parsed from sc-memory. So you will be able use it to search/generate constructions.\n       You can use this property just for members that has  ScTemplate  type.\n       \n       \nSC_PROPERTY(Template(\"test_template\"))\nScTemplate m_testTemplate;\n       \n     \n    \n     ForceCreate \n     \n       Arguments: \n       \n         [ optional ] type of sc-element. Any value from  ScType::Node... \n       \n       Used just with  Keynode  property. Using of this property force sc-element creation, if it didn't found by system identifier.\n       \n       \nSC_PROPERTY(Keynode(\"device\"), ForceCreate(ScType::NodeConstClass))\nstatic ScAddr m_device;  SC_PROPERTY(Keynode(\"device\"), ForceCreate) // default value ScType::Node\nstatic ScAddr m_node;",
            "title": "Members"
        },
        {
            "location": "/cpp/cpp-meta/#faq",
            "text": "How to include one  MyObject  into  OtherObject   /* In CPP file you should include header file for object, that implemented in this file\n * For example in file MyObject.cpp we should make order\n */\n#include \"otherObject.hpp\"\n#include \"otherObject2.hpp\"\n...\n\n#include \"myObject.hpp\"\n\n// other includes (that doesn't contains ScObject derived classes)\n...\n\n// Implementation\n...",
            "title": "FAQ"
        },
        {
            "location": "/cpp/kpm/",
            "text": "Knowledge processing machine (KPM) - is a set of modules. Each module contains implementation of sc-agents. Also they can contains any other functions and classes, than used by sc-agents implementation.\n\n\nScModule\n\n\nModule - is a dynamic library. That implement specified module class.\nTo create module you need to do next steps:\n\n\n\n\nCreate directory for you module in sc-kpm. For example: \nsc-kpm/nl\n;\n\n\nGo to created directory;\n\n\nCreate file \nCMakeLists.txt\n with content (replace nl (module name) to yours one:\n\n\n\n\nCMakeLists.txt\n\n\nset(SC_IOT_SRC ${CMAKE_CURRENT_LIST_DIR})\n\nset(SOURCES\n    \"nl.cpp\"\n)\nset(HEADERS\n    \"nl.hpp\"\n)\n\ninclude_directories(${SC_IOT_SRC} ${SC_MEMORY_SRC})\n\nadd_library (nl SHARED ${SOURCES} ${HEADERS})\nadd_dependencies(nl sc-memory-cpp)\ntarget_link_libraries(nl sc-memory-cpp)\n\nsc_codegen(nl ${SC_IOT_SRC})\n\n\n\n\nAfter that you need to create two files (cpp, hpp):\n\n\nnl.hpp\n\n\n#pragma once\n\n#include <sc-memory/cpp/sc_module.hpp>\n\n#include \"nl.generated.hpp\"\n\nclass nlModule : public ScModule\n{\n  SC_CLASS(LoadOrder(11))\n  SC_GENERATED_BODY()\n\n  virtual sc_result InitializeImpl() override;\n  virtual sc_result ShutdownImpl() override;\n};\n\n\n\n\nnl.cpp\n\n\n#include \"nl.hpp\"\n\nSC_IMPLEMENT_MODULE(nlModule)\n\nsc_result nlModule::InitializeImpl()\n{\n  return SC_RESULT_OK;\n}\n\nsc_result nlModule::ShutdownImpl()\n{\n  return SC_RESULT_OK;\n}\n\n\n\n\nScAgent\n\n\nTo create sc-agent implementation you need:\n1. create source and header file for sc-agent implementation\n2. add created files into \nCMakeLists.txt\n\n\nCMakeLists.txt\n\n\n...\n\nset(SOURCES\n  \"nl.cpp\"\n  \"nlApiAi.cpp\"\n)\nset(HEADERS\n  \"nl.hpp\"\n  \"nlApiAi.hpp\"\n)\n\n...\n\n\n\n\nnlApiAi.hpp\n\n\n#pragma once\n\n#include \"wrap/kpm/sc_agent.hpp\"\n#include \"nlApiAi.generated.hpp\"\n\nnamespace nl\n{\n  class AApiAiParseUserTextAgent : public ScAgentAction\n  {\n    SC_CLASS(Agent, CmdClass(\"command_process_user_text_message\"))\n    SC_GENERATED_BODY()\n  };\n}\n\n\n\n\nnlApiAi.cpp\n\n\n#include \"nlApiAi.hpp\"\n\nnamespace nl\n{\n  SC_AGENT_ACTION_IMPLEMENTATION(AApiAiParseUserTextAgent)\n  {\n    // implement agent logic there\n    return SC_RESULT_ERROR;\n  }\n}\n\n\n\n\nSC_AGENT_ACTION_IMPLEMENTATION\n - is a macros that insert generated code an minimize work. You just insert this one (with class name as parameter), and implement it like a function. During implementation you can use such variables:\n\n \nrequestAddr\n - \nScAddr\n of command (action) instance that was initiated;\n\n \nresultAddr\n - \nScAddr\n of sc-structure that designate command (action) result;\n* \nmMemoryCtx\n - memory context that can be used to work with \nScMemory\n.\n\n\nIf sc-agent finished work without any errors, then it must return \nSC_RESULT_OK\n, otherwise - one of code error \nSC_RESULT_ERROR_...\n.\nResult of agent will be automaticaly added into specified set:\n\n\n\n\nPossible result sets:\n\n\n\n\nsc_result_error\n - unknown error;\n\n\nsc_result_ok\n - no any errors (successfull finish);\n\n\nsc_result_error_invalid_params\n - invalid parameters of agent;\n\n\nsc_result_error_invalid_type\n - invalid type error (invalid type of data of something else);\n\n\nsc_result_error_io\n - input/output error (can't read/write something from/to any source);\n\n\nsc_result_invalid_state\n - invalid state of processing data;\n\n\nsc_result_error_not_found\n - something wasn't found (for example: can't resolve element by identifier);\n\n\nsc_result_error_no_write_rights\n - agent hasn't rights to write something;\n\n\nsc_result_error_no_read_rights\n - agent hans't rights to read something.\n\n\n\n\nIt's important:\n\n\n\n\nAll sc-agents class names must to be started with A symbol;\n\n\nYou can implement more than one \nScAgent\n class in on source/header file;\n\n\nDon't use any other memory contexts instead of \nmMemoryCtx\n in \nScAgent\n implementation;\n\n\nYou need always include \n<you_header>.generated.hpp\n file into your header, if you have any metadata. This include must be a last one in a file.\n\n\n\n\nScEvent\n\n\nThis type of objects allows you to subscribe to any events in \nScMemory\n. There are c++ classes that correspond to specified event types:\n\n\n\n\nScEventAddOutputEdge\n - emits each time, when output (outgoing) edge (from specified element) added;\n\n\nScEventAddInputEdge\n - emits each time, when input (ingoing) edge (into specified element) added;\n\n\nScEventRemoveOutputEdge\n - emits each time, when output (outgoing) edge (from specified element) removed;\n\n\nScEventRemoveInputEdge\n - emits each time, when input (ingoing) edge (into specified element) removed;\n\n\nScEventEraseElement\n - emits, when specified element removed;\n\n\nScEventContentChanged\n - emits each time, when content of specified sc-link changed.\n\n\n\n\nEach event constructor takes 3 parameters:\n\n\n\n\nctx\n - \nScMemoryContext\n that will be used to work with event;\n\n\naddr\n - \nScAddr\n of element that need to be listen for a specified event;\n\n\nfunc\n - delegate to a callback function, that will be called on each event emit (\nbool func(ScAddr const & listenAddr, ScAddr const & edgeAddr, ScAddr const & otherAddr)\n). Description of parameters for this function you can see in table below (for each event type). \nNote: callback function will be called in another thread!\n\n\n\n\nTable of description (parameters of callback function named on pictures, if there are no parameter name on picture, then it's would have an empty value):\n\n\n  \n\n    \nClass\n\n    \nDescription\n\n  \n\n\n\n    \nScEventAddOutputEdge\n\n    \n\n      \n\n      \n\n      Callback calls each time, when any type edge \nedgeAddr\n between \nlistenAddr\n and \notherAddr\n create.\n      \n\n      \nExample C++ code\n:\n      \n\nauto const callback \n\n{\n    // listenAddr - ScAddr of source element\n    //  (listen it in event)\n    // edgeAddr - ScAddr of added output edge\n    // otherAddr - target element of added edge\n    ...\n    return true; // if failed, then return false\n};\nScEventAddOutputEdge evt(ctx, addr, callback);\n      \n\n    \n\n  \n\n\n\n    \nScEventAddInputEdge\n\n    \n\n      \n\n      \n\n      Callback calls each time, when any type edge \nedgeAddr\n between \notherAddr\n and \nlistenAddr\n create.\n      \n\n      \nExample C++ code\n:\n      \n\nauto const callback \n\n{\n    // listenAddr - ScAddr of target element\n    //  (listen it in event)\n    // edgeAddr - ScAddr of added input edge\n    // otherAddr - source element of added edge\n    ...\n    return true; // if failed, then return false\n};\nScEventAddInputEdge evt(ctx, addr, callback);\n      \n\n    \n\n  \n\n\n\n    \nScEventRemoveOutputEdge\n\n    \n\n      \n\n      \n\n      Callback calls each time, when any type edge \nedgeAddr\n between \nlistenAddr\n and any element \notherAddr\n erase.\n      \n\n      \nExample C++ code\n:\n      \n\nauto const callback \n\n{\n    // listenAddr - ScAddr of source element\n    //  (listen it in event)\n    // edgeAddr - ScAddr of erased output edge\n    // otherAddr - target element of erased edge\n    ...\n    return true; // if failed, then return false\n};\nScEventRemoveOutputEdge evt(ctx, addr, callback);\n      \n\n    \n\n  \n\n\n\n    \nScEventRemoveInputEdge\n\n    \n\n      \n\n      \n\n      Callback calls each time, when any type edge \nedgeAddr\n between any element \notherAddr\n and \nlistenAddr\n erase.\n      \n\n      \nExample C++ code\n:\n      \n\nauto const callback \n\n{\n    // listenAddr - ScAddr of target element\n    //  (listen it in event)\n    // edgeAddr - ScAddr of erased input edge\n    // otherAddr - source element of erased edge\n    ...\n    return true; // if failed, then return false\n};\nScEventRemoveOutputEdge evt(ctx, addr, callback);\n      \n\n    \n\n  \n\n\n\n    \nScEventEraseElement\n\n    \n\n    Callback calls when \nlistenAddr\n erased.\n    \n\n    \nExample C++ code\n:\n    \n\nauto const callback \n\n{\n  // listenAddr - ScAddr of erased element\n  //  (listen it in event)\n  // edgeAddr - empty\n  // otherAddr - empty\n  ...\n  return true; // if failed, then return false\n};\nScEventEraseElement evt(ctx, addr, callback);\n    \n\n    \n\n  \n\n\n\n    \nScEventContentChanged\n\n    \n\n      \n\n      \n\n      Callback calls when content of \nlistenAddr\n changed.\n      \n\n      \nExample C++ code\n:\n      \n\nauto const callback \n\n{\n  // listenAddr - ScAddr of element that has\n  //     content changed (listen it in event)\n  // edgeAddr - empty\n  // otherAddr - empty\n  ...\n  return true; // if failed, then return false\n};\nScEventContentChanged evt(ctx, addr, callback);\n      \n\n    \n\n  \n\n\n\n\nScWait\n\n\nThis type of objects used to wait until some event emits. It usually used, when on of an \nScAgent\n want to wait result of another one. There are next kind of \nScWait\n objects:\n\n\n\n\nScWait\n- lock run flow until simple event emits. You can see the list of this events in the Class propertires table (Event property);\n\n\nScWaitCondition\n - lock run flow until simple event emits and specified conditional check returns true. Another words, this works like an \nScWait\n, but returns to run flow if special condition function returns true. Condition function receive 3 parameters (see \nScEvent\n for more details about them);\n\n\nScWaitConstruction\n - wait object, that wait until specified construction would be appeared in a memory. \n(Not implemented yet)\n\n\n\n\nThere are some examples of usage for specified \nScWait\n objects:\n\n\nWait input edge into addr\n\n\nScWait<ScEventAddInputEdge> waiter(ctx, addr);\nwaiter.Wait();\n\n\n\n\nWait input edge into addr, with condition\n\n\nauto check = [](ScAddr const & listenAddr,\n                ScAddr const & edgeAddr,\n                ScAddr const & otherAddr)\n{\n  ... // check condition there\n  return false; // return true or false depending on condition\n};\nScWaitCondition<ScEventAddInputEdge> waiter(ctx, addr, SC_WAIT_CHECK(check));\nwaiter.Wait();\n\n\n\n\nThere are some preimplemented most common waiters:\n* \nScWaitActionFinished\n - wait until specified \ncommand\n will be finished. Example:\n\n\n...\nScWaitActionFinished waiter(ctx, commandAddr);\nwaiter.Wait();\n...",
            "title": "Agents"
        },
        {
            "location": "/cpp/kpm/#scmodule",
            "text": "Module - is a dynamic library. That implement specified module class.\nTo create module you need to do next steps:   Create directory for you module in sc-kpm. For example:  sc-kpm/nl ;  Go to created directory;  Create file  CMakeLists.txt  with content (replace nl (module name) to yours one:   CMakeLists.txt  set(SC_IOT_SRC ${CMAKE_CURRENT_LIST_DIR})\n\nset(SOURCES\n    \"nl.cpp\"\n)\nset(HEADERS\n    \"nl.hpp\"\n)\n\ninclude_directories(${SC_IOT_SRC} ${SC_MEMORY_SRC})\n\nadd_library (nl SHARED ${SOURCES} ${HEADERS})\nadd_dependencies(nl sc-memory-cpp)\ntarget_link_libraries(nl sc-memory-cpp)\n\nsc_codegen(nl ${SC_IOT_SRC})  After that you need to create two files (cpp, hpp):  nl.hpp  #pragma once\n\n#include <sc-memory/cpp/sc_module.hpp>\n\n#include \"nl.generated.hpp\"\n\nclass nlModule : public ScModule\n{\n  SC_CLASS(LoadOrder(11))\n  SC_GENERATED_BODY()\n\n  virtual sc_result InitializeImpl() override;\n  virtual sc_result ShutdownImpl() override;\n};  nl.cpp  #include \"nl.hpp\"\n\nSC_IMPLEMENT_MODULE(nlModule)\n\nsc_result nlModule::InitializeImpl()\n{\n  return SC_RESULT_OK;\n}\n\nsc_result nlModule::ShutdownImpl()\n{\n  return SC_RESULT_OK;\n}",
            "title": "ScModule"
        },
        {
            "location": "/cpp/kpm/#scagent",
            "text": "To create sc-agent implementation you need:\n1. create source and header file for sc-agent implementation\n2. add created files into  CMakeLists.txt  CMakeLists.txt  ...\n\nset(SOURCES\n  \"nl.cpp\"\n  \"nlApiAi.cpp\"\n)\nset(HEADERS\n  \"nl.hpp\"\n  \"nlApiAi.hpp\"\n)\n\n...  nlApiAi.hpp  #pragma once\n\n#include \"wrap/kpm/sc_agent.hpp\"\n#include \"nlApiAi.generated.hpp\"\n\nnamespace nl\n{\n  class AApiAiParseUserTextAgent : public ScAgentAction\n  {\n    SC_CLASS(Agent, CmdClass(\"command_process_user_text_message\"))\n    SC_GENERATED_BODY()\n  };\n}  nlApiAi.cpp  #include \"nlApiAi.hpp\"\n\nnamespace nl\n{\n  SC_AGENT_ACTION_IMPLEMENTATION(AApiAiParseUserTextAgent)\n  {\n    // implement agent logic there\n    return SC_RESULT_ERROR;\n  }\n}  SC_AGENT_ACTION_IMPLEMENTATION  - is a macros that insert generated code an minimize work. You just insert this one (with class name as parameter), and implement it like a function. During implementation you can use such variables:   requestAddr  -  ScAddr  of command (action) instance that was initiated;   resultAddr  -  ScAddr  of sc-structure that designate command (action) result;\n*  mMemoryCtx  - memory context that can be used to work with  ScMemory .  If sc-agent finished work without any errors, then it must return  SC_RESULT_OK , otherwise - one of code error  SC_RESULT_ERROR_... .\nResult of agent will be automaticaly added into specified set:   Possible result sets:   sc_result_error  - unknown error;  sc_result_ok  - no any errors (successfull finish);  sc_result_error_invalid_params  - invalid parameters of agent;  sc_result_error_invalid_type  - invalid type error (invalid type of data of something else);  sc_result_error_io  - input/output error (can't read/write something from/to any source);  sc_result_invalid_state  - invalid state of processing data;  sc_result_error_not_found  - something wasn't found (for example: can't resolve element by identifier);  sc_result_error_no_write_rights  - agent hasn't rights to write something;  sc_result_error_no_read_rights  - agent hans't rights to read something.   It's important:   All sc-agents class names must to be started with A symbol;  You can implement more than one  ScAgent  class in on source/header file;  Don't use any other memory contexts instead of  mMemoryCtx  in  ScAgent  implementation;  You need always include  <you_header>.generated.hpp  file into your header, if you have any metadata. This include must be a last one in a file.",
            "title": "ScAgent"
        },
        {
            "location": "/cpp/kpm/#scevent",
            "text": "This type of objects allows you to subscribe to any events in  ScMemory . There are c++ classes that correspond to specified event types:   ScEventAddOutputEdge  - emits each time, when output (outgoing) edge (from specified element) added;  ScEventAddInputEdge  - emits each time, when input (ingoing) edge (into specified element) added;  ScEventRemoveOutputEdge  - emits each time, when output (outgoing) edge (from specified element) removed;  ScEventRemoveInputEdge  - emits each time, when input (ingoing) edge (into specified element) removed;  ScEventEraseElement  - emits, when specified element removed;  ScEventContentChanged  - emits each time, when content of specified sc-link changed.   Each event constructor takes 3 parameters:   ctx  -  ScMemoryContext  that will be used to work with event;  addr  -  ScAddr  of element that need to be listen for a specified event;  func  - delegate to a callback function, that will be called on each event emit ( bool func(ScAddr const & listenAddr, ScAddr const & edgeAddr, ScAddr const & otherAddr) ). Description of parameters for this function you can see in table below (for each event type).  Note: callback function will be called in another thread!   Table of description (parameters of callback function named on pictures, if there are no parameter name on picture, then it's would have an empty value): \n   \n     Class \n     Description \n    \n     ScEventAddOutputEdge \n     \n       \n       \n      Callback calls each time, when any type edge  edgeAddr  between  listenAddr  and  otherAddr  create.\n       \n       Example C++ code :\n       \nauto const callback  \n{\n    // listenAddr - ScAddr of source element\n    //  (listen it in event)\n    // edgeAddr - ScAddr of added output edge\n    // otherAddr - target element of added edge\n    ...\n    return true; // if failed, then return false\n};\nScEventAddOutputEdge evt(ctx, addr, callback);\n       \n     \n    \n     ScEventAddInputEdge \n     \n       \n       \n      Callback calls each time, when any type edge  edgeAddr  between  otherAddr  and  listenAddr  create.\n       \n       Example C++ code :\n       \nauto const callback  \n{\n    // listenAddr - ScAddr of target element\n    //  (listen it in event)\n    // edgeAddr - ScAddr of added input edge\n    // otherAddr - source element of added edge\n    ...\n    return true; // if failed, then return false\n};\nScEventAddInputEdge evt(ctx, addr, callback);\n       \n     \n    \n     ScEventRemoveOutputEdge \n     \n       \n       \n      Callback calls each time, when any type edge  edgeAddr  between  listenAddr  and any element  otherAddr  erase.\n       \n       Example C++ code :\n       \nauto const callback  \n{\n    // listenAddr - ScAddr of source element\n    //  (listen it in event)\n    // edgeAddr - ScAddr of erased output edge\n    // otherAddr - target element of erased edge\n    ...\n    return true; // if failed, then return false\n};\nScEventRemoveOutputEdge evt(ctx, addr, callback);\n       \n     \n    \n     ScEventRemoveInputEdge \n     \n       \n       \n      Callback calls each time, when any type edge  edgeAddr  between any element  otherAddr  and  listenAddr  erase.\n       \n       Example C++ code :\n       \nauto const callback  \n{\n    // listenAddr - ScAddr of target element\n    //  (listen it in event)\n    // edgeAddr - ScAddr of erased input edge\n    // otherAddr - source element of erased edge\n    ...\n    return true; // if failed, then return false\n};\nScEventRemoveOutputEdge evt(ctx, addr, callback);\n       \n     \n    \n     ScEventEraseElement \n     \n    Callback calls when  listenAddr  erased.\n     \n     Example C++ code :\n     \nauto const callback  \n{\n  // listenAddr - ScAddr of erased element\n  //  (listen it in event)\n  // edgeAddr - empty\n  // otherAddr - empty\n  ...\n  return true; // if failed, then return false\n};\nScEventEraseElement evt(ctx, addr, callback);\n     \n     \n    \n     ScEventContentChanged \n     \n       \n       \n      Callback calls when content of  listenAddr  changed.\n       \n       Example C++ code :\n       \nauto const callback  \n{\n  // listenAddr - ScAddr of element that has\n  //     content changed (listen it in event)\n  // edgeAddr - empty\n  // otherAddr - empty\n  ...\n  return true; // if failed, then return false\n};\nScEventContentChanged evt(ctx, addr, callback);",
            "title": "ScEvent"
        },
        {
            "location": "/cpp/kpm/#scwait",
            "text": "This type of objects used to wait until some event emits. It usually used, when on of an  ScAgent  want to wait result of another one. There are next kind of  ScWait  objects:   ScWait - lock run flow until simple event emits. You can see the list of this events in the Class propertires table (Event property);  ScWaitCondition  - lock run flow until simple event emits and specified conditional check returns true. Another words, this works like an  ScWait , but returns to run flow if special condition function returns true. Condition function receive 3 parameters (see  ScEvent  for more details about them);  ScWaitConstruction  - wait object, that wait until specified construction would be appeared in a memory.  (Not implemented yet)   There are some examples of usage for specified  ScWait  objects:  Wait input edge into addr  ScWait<ScEventAddInputEdge> waiter(ctx, addr);\nwaiter.Wait();  Wait input edge into addr, with condition  auto check = [](ScAddr const & listenAddr,\n                ScAddr const & edgeAddr,\n                ScAddr const & otherAddr)\n{\n  ... // check condition there\n  return false; // return true or false depending on condition\n};\nScWaitCondition<ScEventAddInputEdge> waiter(ctx, addr, SC_WAIT_CHECK(check));\nwaiter.Wait();  There are some preimplemented most common waiters:\n*  ScWaitActionFinished  - wait until specified  command  will be finished. Example:  ...\nScWaitActionFinished waiter(ctx, commandAddr);\nwaiter.Wait();\n...",
            "title": "ScWait"
        },
        {
            "location": "/cpp/templates/",
            "text": "Templates is a very powerful mechanism to work with semantic network (graph). You can search and generate any constructions using templates.\nThere are list of available classes to work with templates:\n\n \nScTemplate\n - class that represents template in C++ code;\n\n \nScTemplateGenParams\n - parameters that contains values of variables in template. This class usually used when you generate construction by template;\n\n \nScTemplateSearchResult\n - contains result of search by template (list of found constructions);\n\n \nScTemplateSearchResultItem\n - represents on search result item;\n* \nScTemplateGenResult\n - represent result of generation by template.\n\n\nScTemplate\n\n\nClass to work with templates in c++. Before reading this paragraph you need to read common \ninformation about types\n.\n\n\nLet use \nf\n symbols for constant parameter of template. Let use \na\n symbol for a variable parameter of template. Then template to search all output edges from specified sc-element will be a triple:\n\n where first element is known \nf\n;\n\n second and third elements need to be found \na\n.\n\n\nThere are possible 3 types of simple templates:\n\n \nf_a_a\n - template to find all outgoing edges from a specified sc-element;\n\n \nf_a_f\n - template to find all edges between two specified sc-elements;\n* \na_a_f\n - template to find all ingoing edges to a specified sc-element.\n\n\nThere are some methods available for \nScTemplate\n class:\n* \ntriple\n - method that adds triple construction into template. There are some examples of using this function to produce simple templates:\n\n\n\n  \n\n    \nTemplate\n\n    \nDescription\n\n  \n\n\n  \n\n    \nf_a_a\n\n    \n\n      \nGraphical representation\n\n      \n\n      \nEqual C++ code\n\n      \n\n\n\nScTemplate templ;\ntempl.Triple(\n  param1,\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  ScType::NODE_VAR\n);\n\n\n\n      \nThis triple template using to traverse output edges from specified sc-element.\n      \nThere \nparam1\n is a known \nScAddr\n of sc-element. It must be a valid (use \nScAddr::IsValid\n method to check). Where \n_param2\n and \n_param3\n are \nScType\n for compare by search engine. When search engine will traverse output edges from \nparam1\n. Construction will be added into traverse result, where output edge from \nparam1\n, will suitable to specified type \n_param2\n, and type of target element of this edge will be sutable for a type \n_param3\n.\n      \nYou can use any type of \n_param3\n (including edges) depending on construction you want to find. But \n_param2\n should be any type of variable edge.\n    \n\n  \n\n\n  \n\n    \nf_a_f\n\n    \nGraphical representation\n\n    \n\n    \nEqual C++ code\n\n    \n\n\n\nScTemplate templ;\ntempl.Triple(\n  param1,\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  param3\n);\n\n\n    \nThis triple template using to find edge between \nparam1\n and \nparam3\n.\n    \nThere are \nparam1\n and \nparam3\n a known \nScAddr\n of sc-elements. Edge type \n_param2\n should be variable.\n\n    \n\n  \n\n\n  \n\n    \na_a_f\n\n    \nGraphical representation\n\n    \n\n    \nEqual C++ code\n\n    \n\n\n\nScTemplate templ;\ntempl.Triple(\n  ScType::NODE_VAR,\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  param3\n);\n\n\n    \nThis triple template using to traverse input edges from specified sc-element.\n    \nThere \nparam3\n is a known \nScAddr\n of sc-element. You can use any type of \n_param1\n (including edges) depending on construction you want to find. But \n_param2\n should be any type of variable edge.\n    \n\n  \n\n\n\n\n\nWhen template search engine works, it tries to traverse graph by simple (triple) template in order they specified. For example we need to check if specified sc-element (\n_device\n) is included into \ndevice\n set and \ndevice_enabled\n set:\n\n\n\n\nCode\n that generates equal template\n\n\nScAddr device_addr, device_enabled_addr;\n...\n\nScTemplate templ;\ntempl.Triple(\n  device_addr,    // sc-addr of device node\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  ScType::NODE_VAR >> \"_device_instance\"\n);\ntempl.Triple(\n  device_enabled_addr,    // sc-addr of device_enabled node\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  \"_device_instance\"\n);\n\n\n\n\nIn code you can see a construction \nScType::NODE_VAR >> \"_device_instance\"\n - this is a naming for a template element. It allows to set name for a specified sc-element in template, and use it many times in different triples. You can see, that in the second triple we use this name \n\"_device_instance\"\n. That means, that we need to place search result from a first triple into the second. So the second triple is a \nf_a_f\n style triple.\n\n\nSo if you want to use the same element \n_x\n in different triples, and you doesn't know it \nScAddr\n, then just use two main rules:\n\n set name of this element in a first occurrence of this element in template triples. You need to use \n>>\n operator to do this (see code below, last element of first triple);\n\n when you need to use named element in next triples, then just use it name instread of \nScType\n or \nScAddr\n (see code below, first element if second triple).\n\n\nExample code with naming\n\n\nScTemplateTempl;\ntempl.Triple(\n  any_addr, // sc-addr of known sc-element\n  ScType::EDGE_ACCESS_VAR_POS_PERM,  // type of unknown edge\n  ScType::NODE_VAR >> \"_x\"  // type and name for an unknown sc-element\n);\ntempl.Triple(\n  \"_x\",  // say that is the same element as the last on in a previous triple\n  ScType::EDGE_ACCESS_VAR_POS_PERM,  // type of unknown edge\n  ScType::NODE_VAR  // type of unknown sc-element\n);\n\n\n\n\nSearch\n\n\nSearch algorithm trying to find all possible variants of specified construction.\n\n\nSearch in construction\n\n\nGenerate",
            "title": "Template"
        },
        {
            "location": "/cpp/templates/#sctemplate",
            "text": "Class to work with templates in c++. Before reading this paragraph you need to read common  information about types .  Let use  f  symbols for constant parameter of template. Let use  a  symbol for a variable parameter of template. Then template to search all output edges from specified sc-element will be a triple:  where first element is known  f ;  second and third elements need to be found  a .  There are possible 3 types of simple templates:   f_a_a  - template to find all outgoing edges from a specified sc-element;   f_a_f  - template to find all edges between two specified sc-elements;\n*  a_a_f  - template to find all ingoing edges to a specified sc-element.  There are some methods available for  ScTemplate  class:\n*  triple  - method that adds triple construction into template. There are some examples of using this function to produce simple templates:  \n   \n     Template \n     Description \n   \n\n   \n     f_a_a \n     \n       Graphical representation \n       \n       Equal C++ code \n        \nScTemplate templ;\ntempl.Triple(\n  param1,\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  ScType::NODE_VAR\n); \n\n       This triple template using to traverse output edges from specified sc-element.\n       There  param1  is a known  ScAddr  of sc-element. It must be a valid (use  ScAddr::IsValid  method to check). Where  _param2  and  _param3  are  ScType  for compare by search engine. When search engine will traverse output edges from  param1 . Construction will be added into traverse result, where output edge from  param1 , will suitable to specified type  _param2 , and type of target element of this edge will be sutable for a type  _param3 .\n       You can use any type of  _param3  (including edges) depending on construction you want to find. But  _param2  should be any type of variable edge.\n     \n   \n\n   \n     f_a_f \n     Graphical representation \n     \n     Equal C++ code \n      \nScTemplate templ;\ntempl.Triple(\n  param1,\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  param3\n); \n     This triple template using to find edge between  param1  and  param3 .\n     There are  param1  and  param3  a known  ScAddr  of sc-elements. Edge type  _param2  should be variable.\n\n     \n   \n\n   \n     a_a_f \n     Graphical representation \n     \n     Equal C++ code \n      \nScTemplate templ;\ntempl.Triple(\n  ScType::NODE_VAR,\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  param3\n); \n     This triple template using to traverse input edges from specified sc-element.\n     There  param3  is a known  ScAddr  of sc-element. You can use any type of  _param1  (including edges) depending on construction you want to find. But  _param2  should be any type of variable edge.\n     \n     When template search engine works, it tries to traverse graph by simple (triple) template in order they specified. For example we need to check if specified sc-element ( _device ) is included into  device  set and  device_enabled  set:   Code  that generates equal template  ScAddr device_addr, device_enabled_addr;\n...\n\nScTemplate templ;\ntempl.Triple(\n  device_addr,    // sc-addr of device node\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  ScType::NODE_VAR >> \"_device_instance\"\n);\ntempl.Triple(\n  device_enabled_addr,    // sc-addr of device_enabled node\n  ScType::EDGE_ACCESS_VAR_POS_PERM,\n  \"_device_instance\"\n);  In code you can see a construction  ScType::NODE_VAR >> \"_device_instance\"  - this is a naming for a template element. It allows to set name for a specified sc-element in template, and use it many times in different triples. You can see, that in the second triple we use this name  \"_device_instance\" . That means, that we need to place search result from a first triple into the second. So the second triple is a  f_a_f  style triple.  So if you want to use the same element  _x  in different triples, and you doesn't know it  ScAddr , then just use two main rules:  set name of this element in a first occurrence of this element in template triples. You need to use  >>  operator to do this (see code below, last element of first triple);  when you need to use named element in next triples, then just use it name instread of  ScType  or  ScAddr  (see code below, first element if second triple).  Example code with naming  ScTemplateTempl;\ntempl.Triple(\n  any_addr, // sc-addr of known sc-element\n  ScType::EDGE_ACCESS_VAR_POS_PERM,  // type of unknown edge\n  ScType::NODE_VAR >> \"_x\"  // type and name for an unknown sc-element\n);\ntempl.Triple(\n  \"_x\",  // say that is the same element as the last on in a previous triple\n  ScType::EDGE_ACCESS_VAR_POS_PERM,  // type of unknown edge\n  ScType::NODE_VAR  // type of unknown sc-element\n);",
            "title": "ScTemplate"
        },
        {
            "location": "/cpp/templates/#search",
            "text": "Search algorithm trying to find all possible variants of specified construction.",
            "title": "Search"
        },
        {
            "location": "/cpp/templates/#search-in-construction",
            "text": "",
            "title": "Search in construction"
        },
        {
            "location": "/cpp/templates/#generate",
            "text": "",
            "title": "Generate"
        },
        {
            "location": "/cpp/common/",
            "text": "ScLink\n\n\nInclude file: \n#include <sc-memory/cpp/sc_link.hpp>\n\n\nThere is a special wrapped class \nScLink\n that makes work with sc-links simple. It allows to set/get common types values.\nSupported types: \nuint8_t\n, \nuint16_t\n, \nuint32_t\n, \nuint64_t\n, \nint8_t\n, \nint16_t\n, \nint32_t\n, \nint64_t\n, \nfloat\n, \ndouble\n, \nstd::string\n.\n\n\nIf you try to get \nType1\n value, but in memory stores \nType2\n value, then function \nGet<Type>()\n will throws an exception \nExceptionInvalidParams\n\n\n\nExample:\n\n\n...\nstd::string const str = \"any text value\";\nScLink link(linkAddr);\nlink.Set(str);\nlink.IsType<std::string>(); // will return true\nstd::string const value = link.Get<std::string>(); // value == str\n\n...\n\nuint32_t const ivalue = 473;\nlink.Set(ivalue);\nlink.IsType<std::string>(); // returns false\nlink.IsType<uint32_t>(); // returns true\nlink.IsType<uint8_t>(); // returns false\n\n...\n\nlink.Get<std::string>(); // throws ExceptionInvalidParams\nlink.Get<uint32_t>(); // returns stored value\nlink.IsType<uint8_t>(); // throws ExceptionInvalidParams\n...\n\n\n\n\n\n\nAlso you can get type of specified \nScLink\n:\n\n\nScLink link;\nlink.Set<uint32_t>(32);\nlink.DetermineType(); // will return ScLink::Type::UInt32\n\n\n\n\nSee \nScLink::Types\n for full list of supported ones.\n\n\n\n\nYou can get value of any ScLink as \nstd::string\n:\n\n\nScLink link;\nlink.Set<uint32_t>(32);\nlink.GetAsString(); // will return \"32\"\n\n\n\n\nCommon constructions\n\n\nInclude file: \n#include <sc-memory/cpp/sc_common_templ.hpp>\n\n\nThere are some function that allows to make a common routine work:\n\n\n\n\nsc::ResolveRelationTuple\n - allow to ensure that specified \nquasy_binary\n relation between tuple and specified element exists. Returns \nScAddr\n of tuple. This function check if specified construction exists, and if it doesn't then generate it by template. Used template for check/generation:\n\n\n\n\n\nExample:\n\n\nScAddr const tuple = sc::ResolveRelationTuple(ctx, el, relAddr);\n// where:\n// el - is a ScAddr of element to ensure tuple exist\n// relAddr - is a ScAddr of quasy_binary relation\n\n\n\n\n\n\n\n\nsc::SetRelationValue\n - create sc-link linked to \nel\n by relation \nrel\n. If it already exist, than changes it value to new one. Returns \nScAddr\n of sc-link. Used template for check/generation:\n\n\n\n\n\nExample:\n\n\nstd::string const value1 = \"test_value\";\nScAddr const linkAddr1 = sc::SetRelationValue(ctx, el, relAddr1, value1);\n\nuint32_t const value2 = 57;\nScAddr const linkAddr2 = sc::SetRelationValue(ctx, el, relAddr1, value2);\n\nSC_ASSERT(linkAddr1 == linkAddr2, ()); // should be valid (ScAddr of link doesn't changed)\n\n\n\n\n\nIterators\n\n\nYou can use 3-element iterators and 5-element iterators from c++ code. Image below shows numeration\nof elements in 3-element (left) and 5-element (right) iterators.\n\n\n\nFor both of them you have two approaches.\nFirst approach to use simple while loop. It suitable, when you need to break this loop depending on logic:\n\n\n...\n// example of f_a_a iterator\nScIterator3Ptr it3 = ctx.Iterator3(\n            set,\n            ScType::EdgeAccessConstPosPerm,\n            ScType::Unknown);\nwhile (it3->Next())\n{\n  // to get values use it3->Get(index), where index in range [0; 2]\n  ... // there is you code\n}\n\n...\n// example of f_a_a_a_f iterator\nScIterator5Ptr it5 = ctx.Iterator5(\n        objAddr,\n        ScType::EdgeDCommonConst,\n        ScType::NodeConstAbstract,\n        ScType::EdgeAccessConstPosPerm,\n        Keynodes::nrel_mass);\n\n\nwhile (it5->Next())\n{\n  // to get values use it5->Get(index), where index in range [0; 4]\n  ... // there is you code\n}\n\n\n\n\nSecond approach allows you iterate 3-element and 5-element constructions with less code, and suitable when\nyou need to iterate all results. \nUse it if you need to iterate all results. Because it more clearly.\n\n\n...\nctx.ForEachIter3(\n    set,\n    ScType::EdgeAccessConstPosPerm,\n    ScType::Unknown,\n    [] (ScAddr const & src, ScAddr const & edge, ScAddr const & trg)\n{\n  // src equal to 0 value of iterator\n  // edge equal to 1 value of iterator\n  // trg equal to 2 value of iterator\n  ... // there is you code\n});\n\n...\nctx.ForEachIter5(\n  objAddr,\n  ScType::EdgeDCommonConst,\n  ScType::NodeConstAbstract,\n  ScType::EdgeAccessConstPosPerm,\n  Keynodes::nrel_mass\n  [] (ScAddr const & src, ScAddr const & edge, ScAddr const & trg, ScAddr const & edgeAttr, ScAddr const & attr)\n{\n  // src equal to 0 value of iterator\n  // edge equal to 1 value of iterator\n  // trg equal to 2 value of iterator\n  // edgeAttr equal to 3 value of iterator\n  // attr equal to 4 value of iterator\n  ... // there is you code\n});\n\n\n\n\nHTTP\n\n\nYou can use \nScHttpRequest\n class to make requests using \nHTTP\n protocol:\n\n\n...\n\nScHttpRequest request(\"http://any.url\");\nrequest.SetType(ScHttpRequest::Type::POST);\nrequest.SetData(\"any data\");\n\nrequest.AddHeader(\"Content-Type: application/json\");\nrequest.AddHeader(...);\n\nrequest.Perform();\nauto const response = request.GetResponse();\nif (response.IsPtrValid() && response->IsSuccess())\n{\n  auto const & responseStr = response->GetData();\n  // process responseStr\n  return true;\n}\n\n...",
            "title": "Common"
        },
        {
            "location": "/cpp/common/#sclink",
            "text": "Include file:  #include <sc-memory/cpp/sc_link.hpp>  There is a special wrapped class  ScLink  that makes work with sc-links simple. It allows to set/get common types values.\nSupported types:  uint8_t ,  uint16_t ,  uint32_t ,  uint64_t ,  int8_t ,  int16_t ,  int32_t ,  int64_t ,  float ,  double ,  std::string .  If you try to get  Type1  value, but in memory stores  Type2  value, then function  Get<Type>()  will throws an exception  ExceptionInvalidParams  Example:  ...\nstd::string const str = \"any text value\";\nScLink link(linkAddr);\nlink.Set(str);\nlink.IsType<std::string>(); // will return true\nstd::string const value = link.Get<std::string>(); // value == str\n\n...\n\nuint32_t const ivalue = 473;\nlink.Set(ivalue);\nlink.IsType<std::string>(); // returns false\nlink.IsType<uint32_t>(); // returns true\nlink.IsType<uint8_t>(); // returns false\n\n...\n\nlink.Get<std::string>(); // throws ExceptionInvalidParams\nlink.Get<uint32_t>(); // returns stored value\nlink.IsType<uint8_t>(); // throws ExceptionInvalidParams\n...   Also you can get type of specified  ScLink :  ScLink link;\nlink.Set<uint32_t>(32);\nlink.DetermineType(); // will return ScLink::Type::UInt32  See  ScLink::Types  for full list of supported ones.   You can get value of any ScLink as  std::string :  ScLink link;\nlink.Set<uint32_t>(32);\nlink.GetAsString(); // will return \"32\"",
            "title": "ScLink"
        },
        {
            "location": "/cpp/common/#common-constructions",
            "text": "Include file:  #include <sc-memory/cpp/sc_common_templ.hpp>  There are some function that allows to make a common routine work:   sc::ResolveRelationTuple  - allow to ensure that specified  quasy_binary  relation between tuple and specified element exists. Returns  ScAddr  of tuple. This function check if specified construction exists, and if it doesn't then generate it by template. Used template for check/generation:   Example:  ScAddr const tuple = sc::ResolveRelationTuple(ctx, el, relAddr);\n// where:\n// el - is a ScAddr of element to ensure tuple exist\n// relAddr - is a ScAddr of quasy_binary relation    sc::SetRelationValue  - create sc-link linked to  el  by relation  rel . If it already exist, than changes it value to new one. Returns  ScAddr  of sc-link. Used template for check/generation:   Example:  std::string const value1 = \"test_value\";\nScAddr const linkAddr1 = sc::SetRelationValue(ctx, el, relAddr1, value1);\n\nuint32_t const value2 = 57;\nScAddr const linkAddr2 = sc::SetRelationValue(ctx, el, relAddr1, value2);\n\nSC_ASSERT(linkAddr1 == linkAddr2, ()); // should be valid (ScAddr of link doesn't changed)",
            "title": "Common constructions"
        },
        {
            "location": "/cpp/common/#iterators",
            "text": "You can use 3-element iterators and 5-element iterators from c++ code. Image below shows numeration\nof elements in 3-element (left) and 5-element (right) iterators.  For both of them you have two approaches.\nFirst approach to use simple while loop. It suitable, when you need to break this loop depending on logic:  ...\n// example of f_a_a iterator\nScIterator3Ptr it3 = ctx.Iterator3(\n            set,\n            ScType::EdgeAccessConstPosPerm,\n            ScType::Unknown);\nwhile (it3->Next())\n{\n  // to get values use it3->Get(index), where index in range [0; 2]\n  ... // there is you code\n}\n\n...\n// example of f_a_a_a_f iterator\nScIterator5Ptr it5 = ctx.Iterator5(\n        objAddr,\n        ScType::EdgeDCommonConst,\n        ScType::NodeConstAbstract,\n        ScType::EdgeAccessConstPosPerm,\n        Keynodes::nrel_mass);\n\n\nwhile (it5->Next())\n{\n  // to get values use it5->Get(index), where index in range [0; 4]\n  ... // there is you code\n}  Second approach allows you iterate 3-element and 5-element constructions with less code, and suitable when\nyou need to iterate all results.  Use it if you need to iterate all results. Because it more clearly.  ...\nctx.ForEachIter3(\n    set,\n    ScType::EdgeAccessConstPosPerm,\n    ScType::Unknown,\n    [] (ScAddr const & src, ScAddr const & edge, ScAddr const & trg)\n{\n  // src equal to 0 value of iterator\n  // edge equal to 1 value of iterator\n  // trg equal to 2 value of iterator\n  ... // there is you code\n});\n\n...\nctx.ForEachIter5(\n  objAddr,\n  ScType::EdgeDCommonConst,\n  ScType::NodeConstAbstract,\n  ScType::EdgeAccessConstPosPerm,\n  Keynodes::nrel_mass\n  [] (ScAddr const & src, ScAddr const & edge, ScAddr const & trg, ScAddr const & edgeAttr, ScAddr const & attr)\n{\n  // src equal to 0 value of iterator\n  // edge equal to 1 value of iterator\n  // trg equal to 2 value of iterator\n  // edgeAttr equal to 3 value of iterator\n  // attr equal to 4 value of iterator\n  ... // there is you code\n});",
            "title": "Iterators"
        },
        {
            "location": "/cpp/common/#http",
            "text": "You can use  ScHttpRequest  class to make requests using  HTTP  protocol:  ...\n\nScHttpRequest request(\"http://any.url\");\nrequest.SetType(ScHttpRequest::Type::POST);\nrequest.SetData(\"any data\");\n\nrequest.AddHeader(\"Content-Type: application/json\");\nrequest.AddHeader(...);\n\nrequest.Perform();\nauto const response = request.GetResponse();\nif (response.IsPtrValid() && response->IsSuccess())\n{\n  auto const & responseStr = response->GetData();\n  // process responseStr\n  return true;\n}\n\n...",
            "title": "HTTP"
        },
        {
            "location": "/python/python/",
            "text": "Python\n\n\nYou can implement agents using \nPython 3\n. All python modules should be implemented with specified rules.\n\n\n\n\nYou can specify search paths of a python modules by \npython.modules_path\n value in a \nconfiguration file\n.\n\n\n\n\nUsage example\n\n\nThere are two ways to run python script:\n\n\n\n\nwhen you need run script and wait it finished, then just use this code:\n\n\n\n\n#include <sc-memory/cpp/python/sc_python_interp.hpp>\n...\nvoid doSomething()\n{\n  ...\n  py::ScPythonInterpreter::RunScript(\"lg/tv_service.py\", m_bridge);\n  ...\n}\n\n\n\n\nThen in python you can write any code you want:\n\n\nimport any_module\n\n# create context (with minimal access)\nctx = createScMemoryContext('context name')\n\n# create node\nnodeAddr = ctx.CreateNode(ScType.NodeConst)\n...\n\n# you can use any installed python libraries\nany_module.doSomething()\n\n\n\n\n\n\nif you want to run script as a service and communicate with it, then use code:\n\n\n\n\nclass Service\n{\npublic:\n  void Run()\n  {\n    // Run script in a separate thread\n    m_workThread.reset(new std::thread([&]\n    {\n      // should exist my/my_script.py in python modules path\n      py::ScPythonInterpreter::RunScript(\"my/my_script.py\", m_bridge);\n    }));\n    m_workThread->detach();\n\n    // wait until bridge starts\n    m_bridge->WaitInitialize();\n\n    // now you can use bridge\n    ScPythonBridge::ResponsePtr res = m_bridge->DoRequest(\"eventName\", \"eventData\");\n  }\n\n  void Stop()\n  {\n    m_bridge->Close(); // close bridge\n    m_workThread->join(); // wait until thread finished    \n  }\n\nprivate:\n  py::ScPythonBridgePtr m_bridge; // special bridge to communicate with python script\n  std::unique_ptr<std::thread> m_workThread; // thread where script runs\n};\n\n\n\n\nThen in python code use common module:\n\n\nfrom common import ScModule\n\nclass MyModule(ScModule):\n\n    kNrelMainIdtf = 'nrel_main_idtf'\n    kDevice = 'device'\n\n    def __init__(self):\n        ScModule.__init__(self,\n            createScMemoryContext('MyModule'), keynodes=[\n                # there we can initialize keynodes that we need\n                MyModule.kNrelMainIdtf,\n                MyModule.kDevice,\n            ], cpp_bridge=cpp_bridge)\n        # cpp_bridge - is a global variable that store CPP-Python bridge object\n\n\n    def OnCppUpdate(self):\n        super.OnCppUpdate(self)\n        # you can overload more functions for work\n        # see more details in sc-kpm/python/common/sc_module.py\n\n    def printMainIdtf(self):\n        # template to update current volume value\n        templ = ScTemplate()\n        templ.TripleWithRelation(\n            self.keynodes[self.kDevice], # get ScAddr of keynode\n            ScType.EdgeDCommonVar,\n            ScType.Link >> '_link',\n            ScType.EdgeAccessVarPosPerm,\n            self.keynodes[self.kNrelMainIdtf])\n\n        # self.sc_context - is a context to work with sc-memory (use just this one)\n        searchResult = self.sc_context.HelperSearchTemplate(templ)\n\n        linkAddr = None\n        if searchResult.Size() > 0:\n            # we found old value change it\n            linkAddr = searchResult[0]['_link']\n        else:\n            genResult = self.sc_context.HelperGenTemplate(templ, ScTemplateGenParams())\n            if genResult:\n                linkAddr = genResult['_link']\n\n        if linkAddr:\n            print(self.sc_context.GetLinkContent(linkAddr))\n\n\n\n\n\nClasses\n\n\nScAddr\n\n\nThis class represents \nScAddr\n in C++. Methods of this class:\n\n\n\n\nIsValid\n - if addr is valid, then returns \nTrue\n; otherwise - \nFalse\n\n\nToInt\n - convert addr value to integer (equal C++ \nScAddr::Hash\n). \nUseful for debug purposes\n.\n\n\n__eq__\n - equal operator \n==\n. Can be used like this:\n\n\n\n\nif addr1 == addr2:\n  pass # do something\n\n\n\n\n\n\n\n\n__ne__\n - not equal operator \n!=\n. Can be used like this:\n\n\n\n\nif addr1 != addr2:\n  pass # do something\n\n\n\n\nScType\n\n\nThis class equal to \nScType\n in C++. Methods of this class:\n\n\n\n\nconstructor\n - you can create this class with input type combinations\n\n\n\n\ntype1 = ScType() # equal to ScType.Unknown\ntype2 = ScType.Node # see more constants below\ntype3 = ScType.Node | ScType.Const # equal to ScType.NodeConst\n\n\n\n\n\n\n\n\nIsValid()\n - if type is not \nUnknown\n, then returns \nTrue\n; otherwise - \nFalse\n\n\n__eq__\n - equal operator \n==\n. Can be used like this:\n\n\n\n\nif type1 == type2:\n  pass # do something\n\n\n\n\n\n\n\n\n__eq__\n - not equal operator \n!=\n. Can be used like this:\n\n\n\n\nif type1 != type2:\n  pass # do something\n\n\n\n\n\n\n\n\n__or__\n - bitwise or operator \n|\n. Can be used like this:\n\n\n\n\ntype1 = ScType.Node\ntype2 = ScType.Const\n\ntype3 = type1 | type2\ntype3 == ScType.NodeConst # will be True\n\n\n\n\n\n\n\n\n__and__\n - bitwise and operator \n&\n. Can be used like this:\n\n\n\n\ntype1 = ScType.NodeConst\ntype2 = ScType.Node\n\ntype3 = type1 & type2\n\ntype3 == type1 # will be True\n\n\n\n\n\n\n\n\nIsLink()\n - if type represents a link, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\ntype1 = ScType.LinkConst\ntype1.IsLink() # returns True\n\n\n\n\n\n\n\n\nIsEdge()\n - if type represents an edge, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\ntype1 = ScType.EdgeAccessConstFuzPerm\ntype1.IsEdge() # return True\n\n\n\n\n\n\n\n\nIsNode()\n - if type represents a node, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\ntype1 = ScType.NodeConst\ntype1.IsNode() # returns True\n\n\n\n\n\n\n\n\nIsValid()\n - if type is not \nUnknown\n, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\ntype1 = ScType.Node\ntype1.IsValid() # return True\n\ntype2 = ScType()\ntype2.IsValid() # return False\n\n\n\n\n\n\n\n\nIsConst()\n - if type represents constant, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\ntype1 = ScType()\ntype1.IsConst() # returns False\n\ntype2 = ScType.NodeVar()\ntype2.IsConst() # return False\n\ntype3 = ScType.Node()\ntype3.IsConst() # return False\n\ntype4 = ScType.NodeConst()\ntype4.IsConst() # returns True\n\n\n\n\n\n\n\n\nIsVar()\n - if type represents variable, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\ntype1 = ScType()\ntype1.IsVar() # returns False\n\ntype2 = ScType.NodeVar()\ntype2.IsVar() # returns True\n\ntype3= ScType.Node()\ntype3.IsVar() # returns False\n\ntype4 = ScType.NodeConst\ntype4.IsVar() # returns False\n\n\n\n\n\n\nToInt()\n - returns integer, that represents a type. Useful for debug purposes\n\n\n\n\nThere are some predefined types\n. You can find them in \ntypes table\n (see C++ table). In \nPython\n you should use \nScType.Node\n instead of \nScType::Node\n\n\nScIterator3\n\n\nThis class represents iterator for a triples (see \niterators description\n). There are a list of available methods:\n\n\n\n\nNext()\n - move iterator to next triple. Returns \nTrue\n if moved to next triple; otherwise - \nFalse\n. Example of usage:\n\n\n\n\nwhile (it3.Next())\n  ... # do something\n\n\n\n\n\n\n\n\nGet(idx)\n - returns \nScAddr\n of specified element in current triple (should be in range \n[0; 2]\n). Example of usage:\n\n\n\n\nwhile (it3.Next())\n  src = it3.Get(0)  # source element in triple\n  edge = it3.Get(1) # edge in triple\n  trg = it3.Get(2)  # target element in triple\n  ...\n\n\n\n\n\n\n\n\nIsValid()\n - returns \nTrue\n if iterator is valid; otherwise - \nFalse\n\n\n\n\nScIterator5\n\n\nThis class represents iterator of 5-element constructions (see \niterators description\n). There are a list of available methods:\n\n\n\n\nNext()\n - move iterator to next 5-element construction. Returns \nTrue\n if moved to next construction; otherwise - \nFalse\n. Example of usage:\n\n\n\n\nwhile (it5.Next())\n  ... # do something\n\n\n\n\n\n\n\n\nGet(idx)\n - returns \nScAddr\n of specified element in current construction (should be in range \n[0; 4]\n). Example of usage:\n\n\n\n\nwhile (it5.Next())\n  src = it5.Get(0)      # source element in triple\n  edge = it5.Get(1)     # edge in triple\n  trg = it5.Get(2)      # target element in triple\n  attrEdge = it5.Get(3) # edge from attribute set\n  attr = it5.Get(4)     # attribute set\n  ...\n\n\n\n\n\n\n\n\nIsValid()\n - returns \nTrue\n if iterator is valid; otherwise - \nFalse\n\n\n\n\nScLinkContent\n\n\nThis class wrap content of link. It allows to unpack it to \nstring\n, \nint\n or \nfloat\n. There are methods of this class:\n\n\n\n\nAsString\n - get content of a link as \nstring\n value.\n\n\n\n\ncontent = ctx.GetLinkContent(linkAddr)\nstringValue = content.AsString()\n\n\n\n\n\n\n\n\nAsInt\n - get content of a link as \nint\n value. If length of content not equal to 8 bytes, then \nExceptionInvalidType\n will be raised.\n\n\n\n\ncontent = ctx.GetLinkContent(linkAddr)\nintValue = content.AsInt()\n\n\n\n\n\n\n\n\nAsFloat\n - get content of a link as \nfloat\n value. If length of content not equal to 8 bytes, then \nExceptionInvalidType\n will be raised.\n\n\n\n\ncontent = ctx.GetLinkContent(linkAddr)\nfloatValue = content.AsFloat()\n\n\n\n\nScTemplateGenParams\n\n\nThis class accumulate parameters for a template generation. There are methods of this class:\n\n\n\n\nAdd(paramName, valueAddr)\n - add new parameter value, where \nparamName\n - string with a replacement name; \nvalueAddr\n - \nScAddr\n of element that need to be placed instead of specified replacement (see more in \ntemplates description\n)\n\n\n\n\nparams = ScTemplateGenParams()\nparams.Add(\"_item\", itemAddr);\n...\n\n\n\n\n\n\n\n\nGet(paramName)\n - return value of parameter with a specified name \nparamName\n. If parameter with specified identifier exists, then returns \nScAddr\n value of it; otherwise - \nNone\n\n\n\n\naddr = params.Get(\"_item\")\n\n\n\n\n\n\n\n\nIsEmpty()\n - if there are no any parameters added, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\nScTemplateGenResult\n\n\nThis class wrap template generation result. There are methods of this class:\n\n\n\n\nSize()\n - return number of elements\n\n\n\n\n\n\n\n\n__getitem__(replName)\n - return specified result by replacement name (\nreplName\n - string). Returns \nScAddr\n type. If there are no replacement with a specified name, then raise \nExceptionItemNotFound\n exception\n\n\n\n\naddr = genResult[\"node1\"]\n\n\n\n\nScTemplateSearchResultItem\n\n\nThis class represents one result for a search by template. There are methods of this class:\n\n\n\n\nSize()\n - return size of result (number of addrs equal to search construction)\n\n\n\n\n\n\n\n\n__getitem__\n - allows to get result items by any index: \nint\n, \nstr\n. In case of \nint\n index you will just get \nScAddr\n by index in result array (length equal to \nSize()\n) this case suitable, when you need to iterate all addrs in result. \nYou will receive duplicate \nScAddr\n's, because result stored as array of founded triples.'\n When you try to get \nScAddr\n by name it will be find it by replacement name (see \ntemplates\n for more info). If there are no element with specified index, then returns \nNone\n\n\n\n\nresultSize = searchResultItem.Size()\nfor i in range(resultSize):\n  addr = searchResultItem[i] # iterate all addrs\n\naddr1 = searchResultItem[\"replacement name\"] # get by replacement name\n\n\n\n\nScTemplateSearchResult\n\n\nThis class represent list of results by template search. There are methods of this class:\n\n\n\n\nSize()\n - return number of results.\n\n\n\n\n\n\n\n\n__getitem__\n - get result by specified index (\nint\n should be less then \nSize()\n).\n\n\n\n\nresultNum = searchResult.Size()\nfor i in range(resultNum):\n  searchResultItem = searchResult[i]\n\n  # work with searchResultItem there see (ScTemplateSearchResult)\n\n\n\n\nScMemoryContext\n\n\nThis class implements context, that allows you to work with memory.\n\nDO NOT use one context in different threads\n\nThere are methods of this class:\n\n\n\n\nCreateNode(type)\n - create node with specified type. Where \ntype\n is an instance of \nScType\n (just \nedge\n types could be used). Returns \nScAddr\n of created node. If returned \nScAddr\n is not valid (\nIsValid()\n), then node wasn't created.\n\n\n\n\nnodeAddr = ctx.CreateNode(ScType.NodeConst)\n\n\n\n\n\n\n\n\nCreateEdge(type, src, trg)\n - create edge between \nsrc\n and \ntrg\n elements. Where \ntype\n is an instance\nof \nScType\n (just \nedge\n types could be used); \nsrc\n is a \nScAddr\n of source element (could be any but not \nUnknown\n); \ntrg\n is a \nScAddr\n of target element (could be any but not \nUnknown\n). Returns \nScAddr\n of created edge, but if returned \nScAddr\n is not valid, then edge wasn't created.\n\n\n\n\nedgeAddr = ctx.CreateEdge(ScType.EdgeAccessConstPosPerm, srcAddr, trgAddr)\n\n\n\n\n\n\n\n\nCreateLink()\n - create link. Returns \nScAddr\n of created link, but if returned \nScAddr\n is not valid, then link wasn't created\n\n\n\n\nlinkAddr = ctx.CreateLink()\n\n\n\n\n\n\n\n\nGetName()\n - returns name of context. Useful in debug purposes\n\n\n\n\n\n\n\n\nIsElement(addr)\n - if element with specified \naddr\n exist, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\nctx.IsElement(elementAddr)\n\n\n\n\n\n\n\n\nGetElementType(addr)\n - returns type of specified element. If element doesn't exist, then returns \nScType.Unknown\n\n\n\n\nt = ctx.GetElementType(elementAddr)\n\n\n\n\n\n\n\n\nGetEdgeInfo(addr)\n - returns tuple \n(src, trg)\n, where \nsrc\n - is a \nScAddr\n of adge source element; \ntrg\n - target element. If \naddr\n point to element that doesn't exist, or is not an edge, then returns \n(None, None)\n.\n\n\n\n\nsrc, trg = ctx.GetEdgeInfo(edgeAddr)\n\n\n\n\n\n\n\n\nSetLinkContent(addr, content)\n - sets specified \ncontent\n into link (specified with \naddr\n). Type of \ncontent\n should be one of: \nint\n, \nfloat\n, \nstring\n. If content changed, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\n\n...\nctx.SetLinkContent(linkAddr1, 56)\n...\nctx.SetLinkContent(linkAddr1, 56.0)\n...\nctx.SetLinkContent(linkAddr1, \"any text\")\n...\n\n\n\n\n\n\n\n\n\nGetLinkContent(addr)\n - returns content of a specified link. If specified \naddr\n is not a link, or it doesn't exist, then returns \nNone\n. Returned value has type \nScLinkContent\n.\n\n\n\n\n...\n\nvalue = ctx.GetLinkContent(elementAddr)\nif value:\n  print (value)\n\n...\n\n\n\n\n\n\n\n\nIterator3(param1, param2, param3)\n - create iterator for a specified triple template. Parameters \nparam1\n, \nparam2\n, \nparam3\n could be on of a type: \nScAddr\n, \nScType\n. For more information about iterators see \niterators description\n. If iterator created, then return \nScIterator3\n object; otherwise - \nNone\n\n\n\n\nitFAA = ctx.Iterator3(addr1, ScType.EdgeAccessConstPosPerm, ScType.NodeVar)\nwhile itFAA.Next():\n  pass # process iterated constructions there\n\n...\n\nitFAF = ctx.Iterator3(addr1, ScType.EdgeAccessConstPosPerm, addr2)\nwhile itFAF.Next():\n  pass # process iterated constructions there\n\n...\n\nitAAF = ctx.Iterator3(ScType.NodeConst, ScType.EdgeAccessConstPosPerm, addr2)\nwhile itAAF.Next():\n  pass # process iterated constructions there\n\n\n\n\n\n\n\n\nIterator5(param1, param2, param3, param4, param5)\n - create iterator for a specified 5-element construction. Parameters \nparam1\n, \nparam2\n, \nparam3\n, \nparam4\n, \nparam5\n could be on of a type \nScAddr\n, \nScType\n. For more information about iterators see \niterators description\n. If iterator created, then return \nScIterator5\n object; otherwise - \nNone\n\n\n\n\nitFAFAF = ctx.Iterator5(\n            addr1,\n            ScType.EdgeAccessConstPosPerm,\n            addr2,\n            ScType.EdgeAccessVarPosTemp,\n            attr)\nwhile itFAFAF.Next():\n  pass # process iterated constructions there\n\n...\n\nitFAFAA = ctx.Iterator5(\n            addr1,\n            ScType.EdgeAccessConstPosPerm,\n            addr2,\n            ScType.EdgeAccessVarPosTemp,\n            ScType.Node)\nwhile itFAFAA.Next():\n  pass # process iterated constructions there\n\n...\n\nitFAAAF = ctx.Iterator5(\n            addr1,\n            ScType.EdgeAccessConstPosPerm,\n            ScType.NodeVar,\n            ScType.EdgeAccessVarPosTemp,\n            attr)\nwhile itFAAAF.Next():\n  pass # process iterated constructions there\n\n...\n\nitFAAAA = ctx.Iterator5(\n            addr1,\n            ScType.EdgeAccessConstPosPerm,\n            ScType.NodeVar,\n            ScType.EdgeAccessVarPosTemp,\n            ScType.Node)\nwhile itFAAAA.Next():\n  pass # process iterated constructions there\n\n...\nitAAFAF = ctx.Iterator5(\n            ScType.NodeConst,\n            ScType.EdgeAccessConstPosPerm,\n            addr2,\n            ScType.EdgeAccessVarPosTemp,\n            attr)\nwhile itAAFAF.Next():\n  pass # process iterated constructions there\n\n...\n\nitAAFAA = ctx.Iterator5(\n            ScType.NodeConst,\n            ScType.EdgeAccessConstPosPerm,\n            addr2,\n            ScType.EdgeAccessVarPosTemp,\n            ScType.Node)\nwhile itAAFAA.Next():\n  pass # process iterated constructions there\n\n\n\n\n\n\n\n\nHelperResolveSystemIdtf(idtf, type)\n - resolve element by system identifier. This function tries to find element with specified system identifier - \nidtf\n. If element wasn't found and type is \nScType\n, then new element will be created with specified system identifier and type. If \ntype\n is \nNone\n, then new element wouldn't created and function returns invalid \nScAddr\n. In other cases function returns \nScAddr\n of element with specified system identifier.\n\n\n\n\naddr = ctx.HelperResolveSystemIdtf(\"nrel_main_idtf\", ScType.NodeConstNoRole)\n\n\n\n\n\n\n\n\nHelperSetSystemIdtf(idtf, addr)\n - set specified system identifier - \nidtf\n, to element with specified \naddr\n. If identifier changed, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\nif ctx.HelperSetSystemIdtf(\"new_idtf\", addr):\n  pass # identifier changed\nelse:\n  pass # identifier not changed\n\n\n\n\n\n\n\n\nHelperGetSystemIdtf(addr)\n - returns system identifier of a specified element. If system identifier exist, then it returns as a non empty string; otherwise result string would be empty.\n\n\n\n\nidtfValue = ctx.HelperGetSystemIdtf(addr)\n\n\n\n\n\n\n\n\nHelperCheckEdge(srcAddr, trgAddr, edgeType)\n - if there are one or more edge with a specified type (\nedgeType\n) between \nsrcAddr\n and \ntrgAddr\n elements, then returns \nTrue\n; otherwise - \nFalse\n\n\n\n\nif ctx.HelperCheckEdge(addr1, addr2, ScType.EdgeAccessConstPosPerm):\n  pass # edge between addr1 and addr2 exist\nelse:\n  pass # edge doesn't exists\n\n\n\n\n\n\n\n\nHelperGenTemplate(templ, params)\n - generate construction by specified template (\ntempl\n should be instance of \nScTemplate\n) with specified parameters (\nparams\n should be instance of \nScTemplateGenParams\n). If construction generated, then returns \nScTemplateGenResult\n that contains generated construction; otherwise - \nNone\n.\n\n\n\n\ntempl = ScTemplate()\n... # fill template\n\nparams = ScTemplateGenParams()\n... # fill parameters\n\nresult = ctx.HelperGenTemplate(templ, params)\n\n\n\n\n\n\n\n\nHelperSearchTemplate(templ)\n - search construction by specified template (\ntempl\n should be instance of \nScTemplate\n). Returns \nScTemplateSearchResult\n object instance. If it \nSize()\n equal to 0, then no anything found\n\n\n\n\ntempl = ScTemplate()\n... # fill template\n\nresult = ctx.HelperSearchTemplate(templ)\n\n\n\n\n\n\n\n\nHelperBuildTemplate(templAddr)\n - build template from construction in memory. Returns \nScTemplate\n instance. If template wasn't built, then return \nNone\n\n\n\n\ntempl = ctx.HelperBuildTemplate(templAddr)\n... # work with template",
            "title": "Python"
        },
        {
            "location": "/python/python/#python",
            "text": "You can implement agents using  Python 3 . All python modules should be implemented with specified rules.   You can specify search paths of a python modules by  python.modules_path  value in a  configuration file .",
            "title": "Python"
        },
        {
            "location": "/python/python/#usage-example",
            "text": "There are two ways to run python script:   when you need run script and wait it finished, then just use this code:   #include <sc-memory/cpp/python/sc_python_interp.hpp>\n...\nvoid doSomething()\n{\n  ...\n  py::ScPythonInterpreter::RunScript(\"lg/tv_service.py\", m_bridge);\n  ...\n}  Then in python you can write any code you want:  import any_module\n\n# create context (with minimal access)\nctx = createScMemoryContext('context name')\n\n# create node\nnodeAddr = ctx.CreateNode(ScType.NodeConst)\n...\n\n# you can use any installed python libraries\nany_module.doSomething()   if you want to run script as a service and communicate with it, then use code:   class Service\n{\npublic:\n  void Run()\n  {\n    // Run script in a separate thread\n    m_workThread.reset(new std::thread([&]\n    {\n      // should exist my/my_script.py in python modules path\n      py::ScPythonInterpreter::RunScript(\"my/my_script.py\", m_bridge);\n    }));\n    m_workThread->detach();\n\n    // wait until bridge starts\n    m_bridge->WaitInitialize();\n\n    // now you can use bridge\n    ScPythonBridge::ResponsePtr res = m_bridge->DoRequest(\"eventName\", \"eventData\");\n  }\n\n  void Stop()\n  {\n    m_bridge->Close(); // close bridge\n    m_workThread->join(); // wait until thread finished    \n  }\n\nprivate:\n  py::ScPythonBridgePtr m_bridge; // special bridge to communicate with python script\n  std::unique_ptr<std::thread> m_workThread; // thread where script runs\n};  Then in python code use common module:  from common import ScModule\n\nclass MyModule(ScModule):\n\n    kNrelMainIdtf = 'nrel_main_idtf'\n    kDevice = 'device'\n\n    def __init__(self):\n        ScModule.__init__(self,\n            createScMemoryContext('MyModule'), keynodes=[\n                # there we can initialize keynodes that we need\n                MyModule.kNrelMainIdtf,\n                MyModule.kDevice,\n            ], cpp_bridge=cpp_bridge)\n        # cpp_bridge - is a global variable that store CPP-Python bridge object\n\n\n    def OnCppUpdate(self):\n        super.OnCppUpdate(self)\n        # you can overload more functions for work\n        # see more details in sc-kpm/python/common/sc_module.py\n\n    def printMainIdtf(self):\n        # template to update current volume value\n        templ = ScTemplate()\n        templ.TripleWithRelation(\n            self.keynodes[self.kDevice], # get ScAddr of keynode\n            ScType.EdgeDCommonVar,\n            ScType.Link >> '_link',\n            ScType.EdgeAccessVarPosPerm,\n            self.keynodes[self.kNrelMainIdtf])\n\n        # self.sc_context - is a context to work with sc-memory (use just this one)\n        searchResult = self.sc_context.HelperSearchTemplate(templ)\n\n        linkAddr = None\n        if searchResult.Size() > 0:\n            # we found old value change it\n            linkAddr = searchResult[0]['_link']\n        else:\n            genResult = self.sc_context.HelperGenTemplate(templ, ScTemplateGenParams())\n            if genResult:\n                linkAddr = genResult['_link']\n\n        if linkAddr:\n            print(self.sc_context.GetLinkContent(linkAddr))",
            "title": "Usage example"
        },
        {
            "location": "/python/python/#classes",
            "text": "",
            "title": "Classes"
        },
        {
            "location": "/python/python/#scaddr",
            "text": "This class represents  ScAddr  in C++. Methods of this class:   IsValid  - if addr is valid, then returns  True ; otherwise -  False  ToInt  - convert addr value to integer (equal C++  ScAddr::Hash ).  Useful for debug purposes .  __eq__  - equal operator  == . Can be used like this:   if addr1 == addr2:\n  pass # do something    __ne__  - not equal operator  != . Can be used like this:   if addr1 != addr2:\n  pass # do something",
            "title": "ScAddr"
        },
        {
            "location": "/python/python/#sctype",
            "text": "This class equal to  ScType  in C++. Methods of this class:   constructor  - you can create this class with input type combinations   type1 = ScType() # equal to ScType.Unknown\ntype2 = ScType.Node # see more constants below\ntype3 = ScType.Node | ScType.Const # equal to ScType.NodeConst    IsValid()  - if type is not  Unknown , then returns  True ; otherwise -  False  __eq__  - equal operator  == . Can be used like this:   if type1 == type2:\n  pass # do something    __eq__  - not equal operator  != . Can be used like this:   if type1 != type2:\n  pass # do something    __or__  - bitwise or operator  | . Can be used like this:   type1 = ScType.Node\ntype2 = ScType.Const\n\ntype3 = type1 | type2\ntype3 == ScType.NodeConst # will be True    __and__  - bitwise and operator  & . Can be used like this:   type1 = ScType.NodeConst\ntype2 = ScType.Node\n\ntype3 = type1 & type2\n\ntype3 == type1 # will be True    IsLink()  - if type represents a link, then returns  True ; otherwise -  False   type1 = ScType.LinkConst\ntype1.IsLink() # returns True    IsEdge()  - if type represents an edge, then returns  True ; otherwise -  False   type1 = ScType.EdgeAccessConstFuzPerm\ntype1.IsEdge() # return True    IsNode()  - if type represents a node, then returns  True ; otherwise -  False   type1 = ScType.NodeConst\ntype1.IsNode() # returns True    IsValid()  - if type is not  Unknown , then returns  True ; otherwise -  False   type1 = ScType.Node\ntype1.IsValid() # return True\n\ntype2 = ScType()\ntype2.IsValid() # return False    IsConst()  - if type represents constant, then returns  True ; otherwise -  False   type1 = ScType()\ntype1.IsConst() # returns False\n\ntype2 = ScType.NodeVar()\ntype2.IsConst() # return False\n\ntype3 = ScType.Node()\ntype3.IsConst() # return False\n\ntype4 = ScType.NodeConst()\ntype4.IsConst() # returns True    IsVar()  - if type represents variable, then returns  True ; otherwise -  False   type1 = ScType()\ntype1.IsVar() # returns False\n\ntype2 = ScType.NodeVar()\ntype2.IsVar() # returns True\n\ntype3= ScType.Node()\ntype3.IsVar() # returns False\n\ntype4 = ScType.NodeConst\ntype4.IsVar() # returns False   ToInt()  - returns integer, that represents a type. Useful for debug purposes   There are some predefined types . You can find them in  types table  (see C++ table). In  Python  you should use  ScType.Node  instead of  ScType::Node",
            "title": "ScType"
        },
        {
            "location": "/python/python/#sciterator3",
            "text": "This class represents iterator for a triples (see  iterators description ). There are a list of available methods:   Next()  - move iterator to next triple. Returns  True  if moved to next triple; otherwise -  False . Example of usage:   while (it3.Next())\n  ... # do something    Get(idx)  - returns  ScAddr  of specified element in current triple (should be in range  [0; 2] ). Example of usage:   while (it3.Next())\n  src = it3.Get(0)  # source element in triple\n  edge = it3.Get(1) # edge in triple\n  trg = it3.Get(2)  # target element in triple\n  ...    IsValid()  - returns  True  if iterator is valid; otherwise -  False",
            "title": "ScIterator3"
        },
        {
            "location": "/python/python/#sciterator5",
            "text": "This class represents iterator of 5-element constructions (see  iterators description ). There are a list of available methods:   Next()  - move iterator to next 5-element construction. Returns  True  if moved to next construction; otherwise -  False . Example of usage:   while (it5.Next())\n  ... # do something    Get(idx)  - returns  ScAddr  of specified element in current construction (should be in range  [0; 4] ). Example of usage:   while (it5.Next())\n  src = it5.Get(0)      # source element in triple\n  edge = it5.Get(1)     # edge in triple\n  trg = it5.Get(2)      # target element in triple\n  attrEdge = it5.Get(3) # edge from attribute set\n  attr = it5.Get(4)     # attribute set\n  ...    IsValid()  - returns  True  if iterator is valid; otherwise -  False",
            "title": "ScIterator5"
        },
        {
            "location": "/python/python/#sclinkcontent",
            "text": "This class wrap content of link. It allows to unpack it to  string ,  int  or  float . There are methods of this class:   AsString  - get content of a link as  string  value.   content = ctx.GetLinkContent(linkAddr)\nstringValue = content.AsString()    AsInt  - get content of a link as  int  value. If length of content not equal to 8 bytes, then  ExceptionInvalidType  will be raised.   content = ctx.GetLinkContent(linkAddr)\nintValue = content.AsInt()    AsFloat  - get content of a link as  float  value. If length of content not equal to 8 bytes, then  ExceptionInvalidType  will be raised.   content = ctx.GetLinkContent(linkAddr)\nfloatValue = content.AsFloat()",
            "title": "ScLinkContent"
        },
        {
            "location": "/python/python/#sctemplategenparams",
            "text": "This class accumulate parameters for a template generation. There are methods of this class:   Add(paramName, valueAddr)  - add new parameter value, where  paramName  - string with a replacement name;  valueAddr  -  ScAddr  of element that need to be placed instead of specified replacement (see more in  templates description )   params = ScTemplateGenParams()\nparams.Add(\"_item\", itemAddr);\n...    Get(paramName)  - return value of parameter with a specified name  paramName . If parameter with specified identifier exists, then returns  ScAddr  value of it; otherwise -  None   addr = params.Get(\"_item\")    IsEmpty()  - if there are no any parameters added, then returns  True ; otherwise -  False",
            "title": "ScTemplateGenParams"
        },
        {
            "location": "/python/python/#sctemplategenresult",
            "text": "This class wrap template generation result. There are methods of this class:   Size()  - return number of elements     __getitem__(replName)  - return specified result by replacement name ( replName  - string). Returns  ScAddr  type. If there are no replacement with a specified name, then raise  ExceptionItemNotFound  exception   addr = genResult[\"node1\"]",
            "title": "ScTemplateGenResult"
        },
        {
            "location": "/python/python/#sctemplatesearchresultitem",
            "text": "This class represents one result for a search by template. There are methods of this class:   Size()  - return size of result (number of addrs equal to search construction)     __getitem__  - allows to get result items by any index:  int ,  str . In case of  int  index you will just get  ScAddr  by index in result array (length equal to  Size() ) this case suitable, when you need to iterate all addrs in result.  You will receive duplicate  ScAddr 's, because result stored as array of founded triples.'  When you try to get  ScAddr  by name it will be find it by replacement name (see  templates  for more info). If there are no element with specified index, then returns  None   resultSize = searchResultItem.Size()\nfor i in range(resultSize):\n  addr = searchResultItem[i] # iterate all addrs\n\naddr1 = searchResultItem[\"replacement name\"] # get by replacement name",
            "title": "ScTemplateSearchResultItem"
        },
        {
            "location": "/python/python/#sctemplatesearchresult",
            "text": "This class represent list of results by template search. There are methods of this class:   Size()  - return number of results.     __getitem__  - get result by specified index ( int  should be less then  Size() ).   resultNum = searchResult.Size()\nfor i in range(resultNum):\n  searchResultItem = searchResult[i]\n\n  # work with searchResultItem there see (ScTemplateSearchResult)",
            "title": "ScTemplateSearchResult"
        },
        {
            "location": "/python/python/#scmemorycontext",
            "text": "This class implements context, that allows you to work with memory. DO NOT use one context in different threads \nThere are methods of this class:   CreateNode(type)  - create node with specified type. Where  type  is an instance of  ScType  (just  edge  types could be used). Returns  ScAddr  of created node. If returned  ScAddr  is not valid ( IsValid() ), then node wasn't created.   nodeAddr = ctx.CreateNode(ScType.NodeConst)    CreateEdge(type, src, trg)  - create edge between  src  and  trg  elements. Where  type  is an instance\nof  ScType  (just  edge  types could be used);  src  is a  ScAddr  of source element (could be any but not  Unknown );  trg  is a  ScAddr  of target element (could be any but not  Unknown ). Returns  ScAddr  of created edge, but if returned  ScAddr  is not valid, then edge wasn't created.   edgeAddr = ctx.CreateEdge(ScType.EdgeAccessConstPosPerm, srcAddr, trgAddr)    CreateLink()  - create link. Returns  ScAddr  of created link, but if returned  ScAddr  is not valid, then link wasn't created   linkAddr = ctx.CreateLink()    GetName()  - returns name of context. Useful in debug purposes     IsElement(addr)  - if element with specified  addr  exist, then returns  True ; otherwise -  False   ctx.IsElement(elementAddr)    GetElementType(addr)  - returns type of specified element. If element doesn't exist, then returns  ScType.Unknown   t = ctx.GetElementType(elementAddr)    GetEdgeInfo(addr)  - returns tuple  (src, trg) , where  src  - is a  ScAddr  of adge source element;  trg  - target element. If  addr  point to element that doesn't exist, or is not an edge, then returns  (None, None) .   src, trg = ctx.GetEdgeInfo(edgeAddr)    SetLinkContent(addr, content)  - sets specified  content  into link (specified with  addr ). Type of  content  should be one of:  int ,  float ,  string . If content changed, then returns  True ; otherwise -  False   \n...\nctx.SetLinkContent(linkAddr1, 56)\n...\nctx.SetLinkContent(linkAddr1, 56.0)\n...\nctx.SetLinkContent(linkAddr1, \"any text\")\n...    GetLinkContent(addr)  - returns content of a specified link. If specified  addr  is not a link, or it doesn't exist, then returns  None . Returned value has type  ScLinkContent .   ...\n\nvalue = ctx.GetLinkContent(elementAddr)\nif value:\n  print (value)\n\n...    Iterator3(param1, param2, param3)  - create iterator for a specified triple template. Parameters  param1 ,  param2 ,  param3  could be on of a type:  ScAddr ,  ScType . For more information about iterators see  iterators description . If iterator created, then return  ScIterator3  object; otherwise -  None   itFAA = ctx.Iterator3(addr1, ScType.EdgeAccessConstPosPerm, ScType.NodeVar)\nwhile itFAA.Next():\n  pass # process iterated constructions there\n\n...\n\nitFAF = ctx.Iterator3(addr1, ScType.EdgeAccessConstPosPerm, addr2)\nwhile itFAF.Next():\n  pass # process iterated constructions there\n\n...\n\nitAAF = ctx.Iterator3(ScType.NodeConst, ScType.EdgeAccessConstPosPerm, addr2)\nwhile itAAF.Next():\n  pass # process iterated constructions there    Iterator5(param1, param2, param3, param4, param5)  - create iterator for a specified 5-element construction. Parameters  param1 ,  param2 ,  param3 ,  param4 ,  param5  could be on of a type  ScAddr ,  ScType . For more information about iterators see  iterators description . If iterator created, then return  ScIterator5  object; otherwise -  None   itFAFAF = ctx.Iterator5(\n            addr1,\n            ScType.EdgeAccessConstPosPerm,\n            addr2,\n            ScType.EdgeAccessVarPosTemp,\n            attr)\nwhile itFAFAF.Next():\n  pass # process iterated constructions there\n\n...\n\nitFAFAA = ctx.Iterator5(\n            addr1,\n            ScType.EdgeAccessConstPosPerm,\n            addr2,\n            ScType.EdgeAccessVarPosTemp,\n            ScType.Node)\nwhile itFAFAA.Next():\n  pass # process iterated constructions there\n\n...\n\nitFAAAF = ctx.Iterator5(\n            addr1,\n            ScType.EdgeAccessConstPosPerm,\n            ScType.NodeVar,\n            ScType.EdgeAccessVarPosTemp,\n            attr)\nwhile itFAAAF.Next():\n  pass # process iterated constructions there\n\n...\n\nitFAAAA = ctx.Iterator5(\n            addr1,\n            ScType.EdgeAccessConstPosPerm,\n            ScType.NodeVar,\n            ScType.EdgeAccessVarPosTemp,\n            ScType.Node)\nwhile itFAAAA.Next():\n  pass # process iterated constructions there\n\n...\nitAAFAF = ctx.Iterator5(\n            ScType.NodeConst,\n            ScType.EdgeAccessConstPosPerm,\n            addr2,\n            ScType.EdgeAccessVarPosTemp,\n            attr)\nwhile itAAFAF.Next():\n  pass # process iterated constructions there\n\n...\n\nitAAFAA = ctx.Iterator5(\n            ScType.NodeConst,\n            ScType.EdgeAccessConstPosPerm,\n            addr2,\n            ScType.EdgeAccessVarPosTemp,\n            ScType.Node)\nwhile itAAFAA.Next():\n  pass # process iterated constructions there    HelperResolveSystemIdtf(idtf, type)  - resolve element by system identifier. This function tries to find element with specified system identifier -  idtf . If element wasn't found and type is  ScType , then new element will be created with specified system identifier and type. If  type  is  None , then new element wouldn't created and function returns invalid  ScAddr . In other cases function returns  ScAddr  of element with specified system identifier.   addr = ctx.HelperResolveSystemIdtf(\"nrel_main_idtf\", ScType.NodeConstNoRole)    HelperSetSystemIdtf(idtf, addr)  - set specified system identifier -  idtf , to element with specified  addr . If identifier changed, then returns  True ; otherwise -  False   if ctx.HelperSetSystemIdtf(\"new_idtf\", addr):\n  pass # identifier changed\nelse:\n  pass # identifier not changed    HelperGetSystemIdtf(addr)  - returns system identifier of a specified element. If system identifier exist, then it returns as a non empty string; otherwise result string would be empty.   idtfValue = ctx.HelperGetSystemIdtf(addr)    HelperCheckEdge(srcAddr, trgAddr, edgeType)  - if there are one or more edge with a specified type ( edgeType ) between  srcAddr  and  trgAddr  elements, then returns  True ; otherwise -  False   if ctx.HelperCheckEdge(addr1, addr2, ScType.EdgeAccessConstPosPerm):\n  pass # edge between addr1 and addr2 exist\nelse:\n  pass # edge doesn't exists    HelperGenTemplate(templ, params)  - generate construction by specified template ( templ  should be instance of  ScTemplate ) with specified parameters ( params  should be instance of  ScTemplateGenParams ). If construction generated, then returns  ScTemplateGenResult  that contains generated construction; otherwise -  None .   templ = ScTemplate()\n... # fill template\n\nparams = ScTemplateGenParams()\n... # fill parameters\n\nresult = ctx.HelperGenTemplate(templ, params)    HelperSearchTemplate(templ)  - search construction by specified template ( templ  should be instance of  ScTemplate ). Returns  ScTemplateSearchResult  object instance. If it  Size()  equal to 0, then no anything found   templ = ScTemplate()\n... # fill template\n\nresult = ctx.HelperSearchTemplate(templ)    HelperBuildTemplate(templAddr)  - build template from construction in memory. Returns  ScTemplate  instance. If template wasn't built, then return  None   templ = ctx.HelperBuildTemplate(templAddr)\n... # work with template",
            "title": "ScMemoryContext"
        },
        {
            "location": "/cpp/el_types/",
            "text": "TODO: Describe types there\n\n\nTODO: Types compare during search\n\n\n\n\n\n  \n\n    \nGraphical (SCg)\n\n    \nC\n\n    \nC++\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node\n\n    \nScType::Node\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_const\n\n    \nScType::NodeConst\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_var\n\n    \nScType::NodeVar\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_const | sc_type_node_tuple\n\n    \nScType::NodeConstTuple\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_var | sc_type_node_tuple\n\n    \nScType::NodeVarTuple\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_const | sc_type_node_struct\n\n    \nScType::NodeConstStruct\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_var | sc_type_node_struct\n\n    \nScType::NodeVarStruct\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_const | sc_type_node_role\n\n    \nScType::NodeConstRole\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_var | sc_type_node_role\n\n    \nScType::NodeVarRole\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_const | sc_type_node_norole\n\n    \nScType::NodeConstNorole\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_var | sc_type_node_norole\n\n    \nScType::NodeVarNorole\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_const | sc_type_node_class\n\n    \nScType::NodeConstClass\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_var | sc_type_node_class\n\n    \nScType::NodeVarClass\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_const | sc_type_node_abstract\n\n    \nScType::NodeConstAbstract\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_var | sc_type_node_abstract\n\n    \nScType::NodeVarAbstract\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_const | sc_type_node_material\n\n    \nScType::NodeConstMaterial\n\n  \n\n\n  \n\n    \n\n    \nsc_type_node | sc_type_var | sc_type_node_material\n\n    \nScType::NodeVarMaterial\n\n  \n\n\n  \n\n    \n\n    \nsc_type_edge_common\n\n    \nScType::EdgeUCommon\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_common\n\n    \nScType::EdgeDCommon\n\n  \n\n\n  \n\n    \n\n    \nsc_type_edge_common | sc_type_const\n\n    \nScType::EdgeUCommonConst\n\n  \n\n\n  \n\n    \n\n    \nsc_type_edge_common | sc_type_var\n\n    \nScType::EdgeUCommonVar\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_common | sc_type_const\n\n    \nScType::EdgeDCommonConst\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_common | sc_type_var\n\n    \nScType::EdgeDCommonVar\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access\n\n    \nScType::EdgeAccess\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_const | sc_type_arc_pos | sc_type_arc_perm\n\n    \nScType::EdgeAccessConstPosPerm\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_var | sc_type_arc_pos | sc_type_arc_perm\n\n    \nScType::EdgeAccessVarPosPerm\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_const | sc_type_arc_neg | sc_type_arc_perm\n\n    \nScType::EdgeAccessConstNegPerm\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_var | sc_type_arc_neg | sc_type_arc_perm\n\n    \nScType::EdgeAccessVarNegPerm\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_const | sc_type_arc_fuz | sc_type_arc_perm\n\n    \nScType::EdgeAccessConstFuzPerm\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_var | sc_type_arc_fuz | sc_type_arc_perm\n\n    \nScType::EdgeAccessVarFuzPerm\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_const | sc_type_arc_pos | sc_type_arc_temp\n\n    \nScType::EdgeAccessConstPosTemp\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_var | sc_type_arc_pos | sc_type_arc_temp\n\n    \nScType::EdgeAccessVarPosPerm\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_const | sc_type_arc_neg | sc_type_arc_temp\n\n    \nScType::EdgeAccessConstNegTemp\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_var | sc_type_arc_neg | sc_type_arc_temp\n\n    \nScType::EdgeAccessVarNegPerm\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_const | sc_type_arc_fuz | sc_type_arc_temp\n\n    \nScType::EdgeAccessConstFuzTemp\n\n  \n\n\n  \n\n    \n\n    \nsc_type_arc_access | sc_type_var | sc_type_arc_fuz | sc_type_arc_temp\n\n    \nScType::EdgeAccessVarFuzPerm",
            "title": "Element types"
        },
        {
            "location": "/other/config/",
            "text": "sc-memory\n\n\nConfiguration\n\n\n[memory]\nmax_loaded_segments = 16      # Maximum number of segments. By default: 65536\n\n[filememory]\nengine = filesystem     # used filememory plugin. Possible values: filesystem, redis\n\n[redis]\nhost = 127.0.0.1      # ip-address of redis server\nport = 6379       # port of redis server\ntimeout = 1500     # max timeout for responce from redis server in milliseconds\n\n[python]\nmodules_path = ../python_modules;../python  # list of search path of python modules (default ./python)\n\n\n\n\nsctp-server\n\n\nConfiguration\n     \n\n\n[Network]\nPort = 56787      # port listening by sctp server\n\n[Repo]\nPath = /home/user/repo      # path to knowledge base binary\nSavePeriod = 3600           # period (in seconds) to save sc-memory state\n\n[Extensions]\nDirectory = /home/user/sc-machine/bin/extensions      # path to directory with sc-memory extensions (ScModules)\n\n[Stat]\nUpdatePeriod = 3600      # period (in seconds) to update sc-memory stat\nPath = /home/user/stat      # path to save stat\n\n... # configuation of sc-machine\n\n\n\n\nWhen you run SCTP-server, then you need to append configuration of sc-memory (see above) to the end of configuration file for server.",
            "title": "Configuration files"
        },
        {
            "location": "/other/config/#sc-memory",
            "text": "Configuration  [memory]\nmax_loaded_segments = 16      # Maximum number of segments. By default: 65536\n\n[filememory]\nengine = filesystem     # used filememory plugin. Possible values: filesystem, redis\n\n[redis]\nhost = 127.0.0.1      # ip-address of redis server\nport = 6379       # port of redis server\ntimeout = 1500     # max timeout for responce from redis server in milliseconds\n\n[python]\nmodules_path = ../python_modules;../python  # list of search path of python modules (default ./python)",
            "title": "sc-memory"
        },
        {
            "location": "/other/config/#sctp-server",
            "text": "Configuration        [Network]\nPort = 56787      # port listening by sctp server\n\n[Repo]\nPath = /home/user/repo      # path to knowledge base binary\nSavePeriod = 3600           # period (in seconds) to save sc-memory state\n\n[Extensions]\nDirectory = /home/user/sc-machine/bin/extensions      # path to directory with sc-memory extensions (ScModules)\n\n[Stat]\nUpdatePeriod = 3600      # period (in seconds) to update sc-memory stat\nPath = /home/user/stat      # path to save stat\n\n... # configuation of sc-machine  When you run SCTP-server, then you need to append configuration of sc-memory (see above) to the end of configuration file for server.",
            "title": "sctp-server"
        },
        {
            "location": "/net/sctp/",
            "text": "\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b SCTP\n\n\nsctp-\u043a\u043e\u043c\u0430\u043d\u0434\u0430\n\n\nSCTP-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439:\n\n \n\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n - \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0435\u0451 \u0442\u0438\u043f \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0435\u0439. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043c\u0435\u0435\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440.\n\n \n\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n - \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0435\u0451 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b. \u0420\u0430\u0437\u043c\u0435\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043b\u0438\u0448\u044c \u043e\u0442 \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.\n\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0435\u0451 \u0442\u0438\u043f\u0430.\n\n\n \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \n\n\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443:\n\n\n \n\n  \n\u041f\u043e\u043b\u0435\n\n  \n\u0420\u0430\u0437\u043c\u0435\u0440\n\n  \n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n \n\n\n\n  \ncode\n\n  \n1 \u0431\u0430\u0439\u0442\n\n  \n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043e \u0434\u0430\u043b\u044c\u0448\u0435)\n\n \n\n\n\n  \nflags\n\n  \n1 \u0431\u0430\u0439\u0442\n\n  \n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u043b\u0430\u0433\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0430\u043b\u0435\u0435)\n\n \n\n\n\n  \nid\n\n  \n4 \u0431\u0430\u0439\u0442\u0430\n\n  \n\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e \u043d\u0435\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439)\n\n \n\n\n\n  \nsize\n\n  \n4 \u0431\u0430\u0439\u0442\u0430\n\n  \n\u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n\n \n\n\n\n\n\u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u043a id \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u0422\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e, \u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0436\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d \u0432 \u043b\u044e\u0431\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \u0421\u0445\u0435\u043c\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\n\n\n\n\u0412\u0430\u0436\u043d\u043e\n: \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0432 \u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441. \u0421\u0435\u0440\u0432\u0435\u0440 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043d\u043e \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0438\u0445 \u043f\u0440\u0438\u0445\u043e\u0434\u0430.\n\n\nsctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n\nSCTP-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439:\n\n \n\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n - \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0435\u0433\u043e \u0442\u0438\u043f \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0435\u043c. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440.\n\n \n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n - \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0420\u0430\u0437\u043c\u0435\u0440 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043b\u0438\u0448\u044c \u043e\u0442 \u0442\u0438\u043f\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0440\u0435\u0443\u0437\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0435\u0433\u043e \u0442\u0438\u043f\u0430. \u0422\u0438\u043f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0442\u0438\u043f\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\n\n\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443:\n\n\n \n\n  \n\u041f\u043e\u043b\u0435\n\n  \n\u0420\u0430\u0437\u043c\u0435\u0440\n\n  \n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n \n\n\n\n  \ncode\n\n  \n1 \u0431\u0430\u0439\u0442\n\n  \n\u0422\u0438\u043f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n \n\n\n\n  \nid\n\n  \n4 \u0431\u0430\u0439\u0442\u0430\n\n  \n\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n \n\n\n\n  \nreturn\n\n  \n1 \u0431\u0430\u0439\u0442\n\n  \n\u041a\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 - \u043e\u0434\u0438\u043d \u0438\u0437 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438\n\n \n\n\n\n  \nsize\n\n  \n4 \u0431\u0430\u0439\u0442\u0430\n\n  \n\u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n\n \n\n\n\n\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430:\n\n\n \n\n  \n\u041a\u043e\u0434\n\n  \n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n \n\n\n\n  \n0x00\n\n  \n\u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n\n \n\n\n\n  \n0x01\n\n  \n\u0411\u0435\u0437\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n\n \n\n\n\n  \n0x02\n\n  \n\u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d (\u043d\u0435 \u0432\u0435\u0440\u043d\u044b\u0439 sc-\u0430\u0434\u0440\u0435\u0441)\n\n \n\n\n\n  \n0x03\n\n  \n\u041d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n\n \n\n\n\n\n\n\u0412\u0430\u0436\u043d\u043e: \n\u0435\u0441\u043b\u0438 sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0442\u043e sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u043b\u0438\u0448\u044c \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u043f\u043e\u0438\u0441\u043a\u0430:\n\n\n \n\n  \n\u041a\u043e\u0434\n\n  \n\u0428\u0430\u0431\u043b\u043e\u043d\n\n \n\n\n\n  \n0\n\n  \n3f_a_a\n\n \n\n\n\n  \n1\n\n  \n3a_a_f\n\n \n\n\n\n  \n2\n\n  \n3f_a_f\n\n \n\n\n\n  \n3\n\n  \n5f_a_a_a_f\n\n \n\n\n\n  \n4\n\n  \n5_a_a_f_a_f\n\n \n\n\n\n  \n5\n\n  \n5_f_a_f_a_f\n\n \n\n\n\n  \n6\n\n  \n5_f_a_f_a_a\n\n \n\n\n\n  \n7\n\n  \n5_f_a_a_a_a\n\n \n\n\n\n  \n8\n\n  \n5_a_a_f_a_a\n\n \n\n\n\n\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043e\u0434\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439:\n\n\n\n \n\n  \n\u041a\u043e\u0434\n\n  \n\u0421\u043e\u0431\u044b\u0442\u0438\u0435\n\n \n\n\n \n\n  \n0\n\n  \n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430)\n\n \n\n\n \n\n  \n1\n\n  \n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430)\n\n \n\n\n \n\n  \n2\n\n  \n\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430)\n\n \n\n\n \n\n  \n3\n\n  \n\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430)\n\n \n\n\n \n\n  \n4\n\n  \n\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n\n \n\n\n \n\n  \n5\n\n  \n\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438\n\n \n\n\n\n\n\n\n\u0414\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043a\u043e\u0434\u044b \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432:\n\n\n\n\u041a\u043e\u0434:\n 0x01 \n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438.\n\n\n\n\n\u041a\u043e\u0434:\n 0x02\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e sc-\u0430\u0434\u0440\u0435\u0441\u0443\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 2 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0442\u0438\u043f sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)\n\n\n\n\n\u041a\u043e\u0434:\n 0x03\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u0443\u0434\u0430\u043b\u044f\u0435\u043c\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u0438\u0448\u044c \u043a\u043e\u0434 \u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u0434\u0430\u043b\u0435\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438.\n\n\n\n\n\u041a\u043e\u0434:\n 0x04\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n2 \u0431\u0430\u0439\u0442\u0430\n - \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \n4 \u0431\u0430\u0439\u0442\u0430\n \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)\n\n\n\n\n\u041a\u043e\u0434:\n 0x05\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 sc-\u0441\u0441\u044b\u043b\u043a\u0438\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \u043d\u0435\u0442\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \n4 \u0431\u0430\u0439\u0442\u0430\n \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 sc-\u0441\u0441\u044b\u043b\u043a\u0438. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)\n\n\n\n\n\u041a\u043e\u0434:\n 0x06\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 sc-\u0434\u0443\u0433\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430, \u0441 \u0443\u043a\u0430\u0437\u043d\u043d\u044b\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n\n   \n2 \u0431\u0430\u0439\u0442\u0430\n - \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 sc-\u0434\u0443\u0433\u0438\n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438\n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438\n\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \n4 \u0431\u0430\u0439\u0442\u0430\n \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 sc-\u0434\u0443\u0433\u0438. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)\n\n\n\n\n\u041a\u043e\u0434:\n 0x07\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u0434\u0443\u0433\u0438 \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \n\n\n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u0443\u0433\u0438 \n\n\n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u0434\u0443\u0433\u0438 \n\n\n\n\n\u041a\u043e\u0434:\n 0x08\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n\n\n\n\n\u041a\u043e\u0434:\n 0x09\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n4 \u0431\u0430\u0439\u0442\u0430\n - sc-\u0430\u0434\u0440\u0435\u0441 \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043c\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e, \u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0441\u0430\u043c\u043e \u043c\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)\n\n\n\n\n\u041a\u043e\u0434:\n 0x0a\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041f\u043e\u0438\u0441\u043a \u0432\u0441\u0435\u0445 sc-\u0441\u0441\u044b\u043b\u043e\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \n\n   \nN \u0431\u0430\u0439\u0442\n - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f: \n\n   \n N \n- \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 sc-\u0441\u0441\u044b\u043b\u043e\u043a (4 \u0431\u0430\u0439\u0442\u0430) \n\n   \n N sc-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \n - \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 sc-\u0441\u0441\u044b\u043b\u043a\u0438. \n\n\n\n\n\u041a\u043e\u0434:\n 0x0b\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n\n   \n4 \u0431\u0430\u0439\u0442\n - sc-\u0430\u0434\u0440\u0435\u0441 \u0441\u0441\u044b\u043b\u043a\u0438 \n\n   \n4 \u0431\u0430\u0439\u0442\n - \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432 \u0431\u0430\u0439\u0442\u0430\u0445 \n\n   \nN \u0431\u0430\u0439\u0442\n - \u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \n\n\n\n\n\u041a\u043e\u0434:\n 0x0c\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 3-\u0445 \u0438\u043b\u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n   \n1 \u0431\u0430\u0439\u0442\n - \u0442\u0438\u043f \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \n\n   \nN \u0431\u0430\u0439\u0442\n - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430. \u0417\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \n    \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u043f\u043e\u0438\u0441\u043a\u0430. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 3f_a_a \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435: 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430; 2 \u0431\u0430\u0439\u0442\u0430 \u0442\u0438\u043f \u0438\u0441\u043a\u043e\u043c\u043e\u0439 \u0434\u0443\u0433\u0438; 2 \u0431\u0430\u0439\u0442\u0430 \u0442\u0438\u043f \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \nf\n \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 sc-\u0430\u0434\u0440\u0435\u0441 (4 \u0431\u0430\u0439\u0442\u0430), \u0430 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \na\n \u0442\u0438\u043f sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (2 \u0431\u0430\u0439\u0442\u0430) \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \n\n   \n 4 \u0431\u0430\u0439\u0442\u0430 \n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445, \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443, \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \n\n   \n N \u0431\u0430\u0439\u0442 \n, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u0441\u043d\u0442\u0440\u0443\u043a\u0446\u0438\u0438. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \nK\n \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443, \u0442\u043e \nN = T * K * 4 \u0431\u0430\u0439\u0442\n, \u0433\u0434\u0435 T - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0438\u0441\u043a\u043e\u043c\u043e\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u0435, \u0434\u043b\u044f 3-\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043e\u043d\u043e \u0440\u0430\u0432\u043d\u043e 3, \u0434\u043b\u044f 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 - 5. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u043b\u0435\u0436\u0430\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u043e\u043d\u0438 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f sc-\u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b\u0445 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\n\n\n\u041a\u043e\u0434:\n 0x0d\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0418\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 (\n\u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n)\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n\n   \n 1 \u0431\u0430\u0439\u0442 \n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \n(max 50)\n\n   \n N \u0431\u0430\u0439\u0442 \n - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \n\n   \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439: \n\n   \n 1 \u0431\u0430\u0439\u0442 \n - \u0442\u0438\u043f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \n\n   \n nF \u0431\u0430\u0439\u0442 \n - \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 (\n\u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0435\u0442\n). \u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (255 - \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430). \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 4 \u0434\u0430\u0441\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. nF - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (fixed), nA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (assign). \u0418\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u044d\u0442\u043e\u0433\u043e. \n\n   \n (nF - k) * 4 + nA * 2 \u0431\u0430\u0439\u0442 \n - \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0438\u0445 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c (k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a) \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \n\n   \n 4 \u0431\u0430\u0439\u0442\u0430 \n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 (\nrCount\n)\n\n   \n N \u0431\u0430\u0439\u0442 \n - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. N = 4 * rCount * k, \u0433\u0434\u0435 k - \u0441\u0443\u043c\u043c\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, k = 8) \n\n\n\n\n\u041a\u043e\u0434:\n 0x0e\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n \n   \n1 \u0431\u0430\u0439\u0442\n - \u0442\u0438\u043f \u0441\u043e\u0431\u044b\u0442\u0438\u044f \n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \n4 \u0431\u0430\u0439\u0442\n. \u0415\u0441\u043b\u0438 \u0436\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043b\u0438\u0448\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0442\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438.\n\n\n\n\n\u041a\u043e\u0434:\n 0x0f\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n4 \u0431\u0430\u0439\u0442\u0430\n - id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u0442\u043e \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434 \u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 \n4 \u0431\u0430\u0439\u0442\u0430\n - id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0430\n\n\n\n\n\u041a\u043e\u0434:\n 0x10\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \u043d\u0435\u0442\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \n4 \u0431\u0430\u0439\u0442\u0430\n \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u0430\u0439\u0442: \n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - id \u0441\u043e\u0431\u044b\u0442\u0438\u044f \n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u0430\u0434\u0440\u0435\u0441 sc-\u0434\u0443\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430/\u0441\u043e\u0437\u0434\u0430\u043d\u0430 (\u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0433\u0438))\n\n\n\n\n\u041a\u043e\u0434:\n 0x11\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 (\n\u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n). \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0438 \u0432 \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0445 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f. \n\u0412\u0430\u0436\u043d\u043e! \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c!\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n\n   \n 1 \u0431\u0430\u0439\u0442 \n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432/\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \n(max <= 50)\n\n   \n N \u0431\u0430\u0439\u0442 \n - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432/\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \n\n   \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439: \n\n   \n 1 \u0431\u0430\u0439\u0442 \n - \u0442\u0438\u043f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \n\n   \n nF \u0431\u0430\u0439\u0442 \n - \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 (\n\u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0435\u0442\n). \u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (255 - \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430). \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 4 \u0434\u0430\u0441\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. nF - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (fixed), nA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (assign). \u0418\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u044d\u0442\u043e\u0433\u043e. \n\n   \n (nF - k) * 4 + nA * 2 \u0431\u0430\u0439\u0442 \n - \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0438\u0445 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c (k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a) \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \n\n   \n N \u0431\u0430\u0439\u0442 \n - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 N = 4 * k, \u0433\u0434\u0435 k - \u0441\u0443\u043c\u043c\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, k = 8) \n\n\n\n\n\u041a\u043e\u0434:\n 0xa0\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041f\u043e\u0438\u0441\u043a sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e \u0435\u0433\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u043c\u0443 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \n\n   \nN \u0431\u0430\u0439\u0442\n - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \n4 \u0431\u0430\u0439\u0442\u0430\n \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\u0433\u043e sc-\u044d\u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)\n\n\n\n\n\u041a\u043e\u0434:\n 0xa1\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \n\n   \n4 \u0431\u0430\u0439\u0442\u0430\n - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \n\n   \nN \u0431\u0430\u0439\u0442\n - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \n\n\n\n\n\u041a\u043e\u0434:\n 0xa2\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0432 \u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445. \u0412\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 http://en.wikipedia.org/wiki/Unix_time\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \n\n   \n8 \u0431\u0430\u0439\u0442\n - \u041d\u0438\u0436\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \n\n   \n8 \u0431\u0430\u0439\u0442\n - \u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \n4 \u0431\u0430\u0439\u0442\u0430\n \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0442\u043c\u0435\u0442\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f. \u041a\u0430\u0436\u0434\u0430\u044f \u0442\u0430\u043a\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0442\u043c\u0435\u0442\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0437\u0438\u043a \u043f\u043e\u043b\u0435\u0439: \n\n   \n8 \u0431\u0430\u0439\u0442\n - \u0412\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\n\n   \n8 \u0431\u0430\u0439\u0442\n - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438\n\n   \n8 \u0431\u0430\u0439\u0442\n - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0434\u0443\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438\n\n   \n8 \u0431\u0430\u0439\u0442\n - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0441\u0441\u044b\u043b\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438\n\n   \n8 \u0431\u0430\u0439\u0442\n - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u044f\u0447\u0435\u0435\u043a \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438\n\n   \n8 \u0431\u0430\u0439\u0442\n - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a sctp \u0441\u0435\u0440\u0432\u0435\u0440\u0443 (\u043d\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445, \u0430 \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0435)\n\n   \n8 \u0431\u0430\u0439\u0442\n - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 sctp \u043a\u043e\u043c\u0430\u043d\u0434 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438)\n\n   \n8 \u0431\u0430\u0439\u0442\n - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 sctp \u043a\u043e\u043c\u0430\u043d\u0434\n\n   \n1 \u0431\u0430\u0439\u0442\n - \u0424\u043b\u0430\u0433 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 1, \u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0431\u044b\u043b\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 sctp \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 0, \u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u0443\u0436\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430\n\n\n\n\n\u041a\u043e\u0434:\n 0xa3\n\n\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\n \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430\n\n\n\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n \u043d\u0435\u0442\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \n4 \u0431\u0430\u0439\u0442\u0430\n, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u0432\u0435\u0440\u0441\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c sctp \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430. (\u0441\u043f\u043e\u0441\u043e\u0431 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0441\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c)",
            "title": "Sctp-protocol"
        },
        {
            "location": "/net/sctp/#sctp",
            "text": "sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u0430  SCTP-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439:   \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b  - \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0435\u0451 \u0442\u0438\u043f \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0435\u0439. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043c\u0435\u0435\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440.   \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b  - \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0435\u0451 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b. \u0420\u0430\u0437\u043c\u0435\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043b\u0438\u0448\u044c \u043e\u0442 \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.  \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0435\u0451 \u0442\u0438\u043f\u0430.   \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b  \n\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443: \n  \n   \u041f\u043e\u043b\u0435 \n   \u0420\u0430\u0437\u043c\u0435\u0440 \n   \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \n   \n   code \n   1 \u0431\u0430\u0439\u0442 \n   \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043e \u0434\u0430\u043b\u044c\u0448\u0435) \n   \n   flags \n   1 \u0431\u0430\u0439\u0442 \n   \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u043b\u0430\u0433\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0430\u043b\u0435\u0435) \n   \n   id \n   4 \u0431\u0430\u0439\u0442\u0430 \n   \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e \u043d\u0435\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439) \n   \n   size \n   4 \u0431\u0430\u0439\u0442\u0430 \n   \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \n    \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u043a id \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u0422\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e, \u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0436\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d \u0432 \u043b\u044e\u0431\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \u0421\u0445\u0435\u043c\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:   \u0412\u0430\u0436\u043d\u043e : \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0432 \u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441. \u0421\u0435\u0440\u0432\u0435\u0440 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043d\u043e \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0438\u0445 \u043f\u0440\u0438\u0445\u043e\u0434\u0430.  sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442  SCTP-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439:   \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430  - \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0435\u0433\u043e \u0442\u0438\u043f \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0435\u043c. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440.   \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f  - \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0420\u0430\u0437\u043c\u0435\u0440 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043b\u0438\u0448\u044c \u043e\u0442 \u0442\u0438\u043f\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.  \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0440\u0435\u0443\u0437\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0435\u0433\u043e \u0442\u0438\u043f\u0430. \u0422\u0438\u043f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0442\u0438\u043f\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.  \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443: \n  \n   \u041f\u043e\u043b\u0435 \n   \u0420\u0430\u0437\u043c\u0435\u0440 \n   \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \n   \n   code \n   1 \u0431\u0430\u0439\u0442 \n   \u0422\u0438\u043f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \n   \n   id \n   4 \u0431\u0430\u0439\u0442\u0430 \n   \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \n   \n   return \n   1 \u0431\u0430\u0439\u0442 \n   \u041a\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 - \u043e\u0434\u0438\u043d \u0438\u0437 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438 \n   \n   size \n   4 \u0431\u0430\u0439\u0442\u0430 \n   \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \n    \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430: \n  \n   \u041a\u043e\u0434 \n   \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \n   \n   0x00 \n   \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \n   \n   0x01 \n   \u0411\u0435\u0437\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \n   \n   0x02 \n   \u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d (\u043d\u0435 \u0432\u0435\u0440\u043d\u044b\u0439 sc-\u0430\u0434\u0440\u0435\u0441) \n   \n   0x03 \n   \u041d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \n    \u0412\u0430\u0436\u043d\u043e:  \u0435\u0441\u043b\u0438 sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0442\u043e sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u043b\u0438\u0448\u044c \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430  \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u043f\u043e\u0438\u0441\u043a\u0430: \n  \n   \u041a\u043e\u0434 \n   \u0428\u0430\u0431\u043b\u043e\u043d \n   \n   0 \n   3f_a_a \n   \n   1 \n   3a_a_f \n   \n   2 \n   3f_a_f \n   \n   3 \n   5f_a_a_a_f \n   \n   4 \n   5_a_a_f_a_f \n   \n   5 \n   5_f_a_f_a_f \n   \n   6 \n   5_f_a_f_a_a \n   \n   7 \n   5_f_a_a_a_a \n   \n   8 \n   5_a_a_f_a_a \n    \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043e\u0434\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439:  \n  \n   \u041a\u043e\u0434 \n   \u0421\u043e\u0431\u044b\u0442\u0438\u0435 \n  \n\n  \n   0 \n   \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) \n  \n\n  \n   1 \n   \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) \n  \n\n  \n   2 \n   \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) \n  \n\n  \n   3 \n   \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) \n  \n\n  \n   4 \n   \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \n  \n\n  \n   5 \n   \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438 \n    \u0414\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043a\u043e\u0434\u044b \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432:  \u041a\u043e\u0434:  0x01   \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c   \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438.   \u041a\u043e\u0434:  0x02  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e sc-\u0430\u0434\u0440\u0435\u0441\u0443  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 2 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0442\u0438\u043f sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)   \u041a\u043e\u0434:  0x03  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u0443\u0434\u0430\u043b\u044f\u0435\u043c\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u0438\u0448\u044c \u043a\u043e\u0434 \u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u0434\u0430\u043b\u0435\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438.   \u041a\u043e\u0434:  0x04  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   2 \u0431\u0430\u0439\u0442\u0430  - \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f  4 \u0431\u0430\u0439\u0442\u0430  \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)   \u041a\u043e\u0434:  0x05  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 sc-\u0441\u0441\u044b\u043b\u043a\u0438  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:  \u043d\u0435\u0442  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f  4 \u0431\u0430\u0439\u0442\u0430  \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 sc-\u0441\u0441\u044b\u043b\u043a\u0438. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)   \u041a\u043e\u0434:  0x06  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 sc-\u0434\u0443\u0433\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430, \u0441 \u0443\u043a\u0430\u0437\u043d\u043d\u044b\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \n    2 \u0431\u0430\u0439\u0442\u0430  - \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 sc-\u0434\u0443\u0433\u0438 \n    4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438 \n    4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f  4 \u0431\u0430\u0439\u0442\u0430  \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 sc-\u0434\u0443\u0433\u0438. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)   \u041a\u043e\u0434:  0x07  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u0434\u0443\u0433\u0438 \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:    4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u0443\u0433\u0438   4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u0434\u0443\u0433\u0438    \u041a\u043e\u0434:  0x08  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:   \u041a\u043e\u0434:  0x09  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   4 \u0431\u0430\u0439\u0442\u0430  - sc-\u0430\u0434\u0440\u0435\u0441 \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043c\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e, \u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0441\u0430\u043c\u043e \u043c\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)   \u041a\u043e\u0434:  0x0a  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041f\u043e\u0438\u0441\u043a \u0432\u0441\u0435\u0445 sc-\u0441\u0441\u044b\u043b\u043e\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   \n    4 \u0431\u0430\u0439\u0442\u0430  - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432 \u0431\u0430\u0439\u0442\u0430\u0445)  \n    N \u0431\u0430\u0439\u0442  - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f:  \n     N  - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 sc-\u0441\u0441\u044b\u043b\u043e\u043a (4 \u0431\u0430\u0439\u0442\u0430)  \n     N sc-\u0430\u0434\u0440\u0435\u0441\u043e\u0432   - \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 sc-\u0441\u0441\u044b\u043b\u043a\u0438.    \u041a\u043e\u0434:  0x0b  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   \n    4 \u0431\u0430\u0439\u0442  - sc-\u0430\u0434\u0440\u0435\u0441 \u0441\u0441\u044b\u043b\u043a\u0438  \n    4 \u0431\u0430\u0439\u0442  - \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432 \u0431\u0430\u0439\u0442\u0430\u0445  \n    N \u0431\u0430\u0439\u0442  - \u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438.    \u041a\u043e\u0434:  0x0c  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 3-\u0445 \u0438\u043b\u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:  \n    1 \u0431\u0430\u0439\u0442  - \u0442\u0438\u043f \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430  \n    N \u0431\u0430\u0439\u0442  - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430. \u0417\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \n    \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u043f\u043e\u0438\u0441\u043a\u0430. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 3f_a_a \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435: 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430; 2 \u0431\u0430\u0439\u0442\u0430 \u0442\u0438\u043f \u0438\u0441\u043a\u043e\u043c\u043e\u0439 \u0434\u0443\u0433\u0438; 2 \u0431\u0430\u0439\u0442\u0430 \u0442\u0438\u043f \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u043a\u0430\u0436\u0434\u043e\u043c\u0443  f  \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 sc-\u0430\u0434\u0440\u0435\u0441 (4 \u0431\u0430\u0439\u0442\u0430), \u0430 \u043a\u0430\u0436\u0434\u043e\u043c\u0443  a  \u0442\u0438\u043f sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (2 \u0431\u0430\u0439\u0442\u0430)   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f  \n     4 \u0431\u0430\u0439\u0442\u0430   - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445, \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443, \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439  \n     N \u0431\u0430\u0439\u0442  , \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u0441\u043d\u0442\u0440\u0443\u043a\u0446\u0438\u0438. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043e  K  \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443, \u0442\u043e  N = T * K * 4 \u0431\u0430\u0439\u0442 , \u0433\u0434\u0435 T - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0438\u0441\u043a\u043e\u043c\u043e\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u0435, \u0434\u043b\u044f 3-\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043e\u043d\u043e \u0440\u0430\u0432\u043d\u043e 3, \u0434\u043b\u044f 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 - 5. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u043b\u0435\u0436\u0430\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u043e\u043d\u0438 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f sc-\u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b\u0445 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.   \u041a\u043e\u0434:  0x0d  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0418\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 ( \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 )  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   \n     1 \u0431\u0430\u0439\u0442   - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432  (max 50) \n     N \u0431\u0430\u0439\u0442   - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432  \n   \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439:  \n     1 \u0431\u0430\u0439\u0442   - \u0442\u0438\u043f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430  \n     nF \u0431\u0430\u0439\u0442   - \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 ( \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0435\u0442 ). \u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (255 - \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430). \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 4 \u0434\u0430\u0441\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. nF - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (fixed), nA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (assign). \u0418\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u044d\u0442\u043e\u0433\u043e.  \n     (nF - k) * 4 + nA * 2 \u0431\u0430\u0439\u0442   - \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0438\u0445 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c (k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a)   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:   \n     4 \u0431\u0430\u0439\u0442\u0430   - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 ( rCount ) \n     N \u0431\u0430\u0439\u0442   - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. N = 4 * rCount * k, \u0433\u0434\u0435 k - \u0441\u0443\u043c\u043c\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, k = 8)    \u041a\u043e\u0434:  0x0e  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:    \n    1 \u0431\u0430\u0439\u0442  - \u0442\u0438\u043f \u0441\u043e\u0431\u044b\u0442\u0438\u044f  \n    4 \u0431\u0430\u0439\u0442\u0430  - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437  4 \u0431\u0430\u0439\u0442 . \u0415\u0441\u043b\u0438 \u0436\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043b\u0438\u0448\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0442\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438.   \u041a\u043e\u0434:  0x0f  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   4 \u0431\u0430\u0439\u0442\u0430  - id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u0442\u043e \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434 \u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0431\u0443\u0434\u0435\u0442  4 \u0431\u0430\u0439\u0442\u0430  - id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0430   \u041a\u043e\u0434:  0x10  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:  \u043d\u0435\u0442  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439  4 \u0431\u0430\u0439\u0442\u0430  \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u0430\u0439\u0442:  \n    4 \u0431\u0430\u0439\u0442\u0430  - id \u0441\u043e\u0431\u044b\u0442\u0438\u044f  \n    4 \u0431\u0430\u0439\u0442\u0430  - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e  \n    4 \u0431\u0430\u0439\u0442\u0430  - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u0430\u0434\u0440\u0435\u0441 sc-\u0434\u0443\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430/\u0441\u043e\u0437\u0434\u0430\u043d\u0430 (\u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0433\u0438))   \u041a\u043e\u0434:  0x11  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 ( \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 ). \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0438 \u0432 \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0445 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f.  \u0412\u0430\u0436\u043d\u043e! \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c!  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   \n     1 \u0431\u0430\u0439\u0442   - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432/\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432  (max <= 50) \n     N \u0431\u0430\u0439\u0442   - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432/\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432  \n   \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439:  \n     1 \u0431\u0430\u0439\u0442   - \u0442\u0438\u043f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430  \n     nF \u0431\u0430\u0439\u0442   - \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 ( \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0435\u0442 ). \u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (255 - \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430). \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 4 \u0434\u0430\u0441\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. nF - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (fixed), nA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (assign). \u0418\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u044d\u0442\u043e\u0433\u043e.  \n     (nF - k) * 4 + nA * 2 \u0431\u0430\u0439\u0442   - \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0438\u0445 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c (k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a)   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:   \n     N \u0431\u0430\u0439\u0442   - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 N = 4 * k, \u0433\u0434\u0435 k - \u0441\u0443\u043c\u043c\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, k = 8)    \u041a\u043e\u0434:  0xa0  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041f\u043e\u0438\u0441\u043a sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e \u0435\u0433\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u043c\u0443 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   \n    4 \u0431\u0430\u0439\u0442\u0430  - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445)  \n    N \u0431\u0430\u0439\u0442  - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f  4 \u0431\u0430\u0439\u0442\u0430  \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\u0433\u043e sc-\u044d\u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442)   \u041a\u043e\u0434:  0xa1  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   \n    4 \u0431\u0430\u0439\u0442\u0430  - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430  \n    4 \u0431\u0430\u0439\u0442\u0430  - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445)  \n    N \u0431\u0430\u0439\u0442  - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:     \u041a\u043e\u0434:  0xa2  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0432 \u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445. \u0412\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 http://en.wikipedia.org/wiki/Unix_time  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:   \n    8 \u0431\u0430\u0439\u0442  - \u041d\u0438\u0436\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430  \n    8 \u0431\u0430\u0439\u0442  - \u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430   \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f  4 \u0431\u0430\u0439\u0442\u0430  \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0442\u043c\u0435\u0442\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f. \u041a\u0430\u0436\u0434\u0430\u044f \u0442\u0430\u043a\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0442\u043c\u0435\u0442\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0437\u0438\u043a \u043f\u043e\u043b\u0435\u0439:  \n    8 \u0431\u0430\u0439\u0442  - \u0412\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \n    8 \u0431\u0430\u0439\u0442  - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 \n    8 \u0431\u0430\u0439\u0442  - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0434\u0443\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 \n    8 \u0431\u0430\u0439\u0442  - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0441\u0441\u044b\u043b\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 \n    8 \u0431\u0430\u0439\u0442  - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u044f\u0447\u0435\u0435\u043a \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 \n    8 \u0431\u0430\u0439\u0442  - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a sctp \u0441\u0435\u0440\u0432\u0435\u0440\u0443 (\u043d\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445, \u0430 \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0435) \n    8 \u0431\u0430\u0439\u0442  - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 sctp \u043a\u043e\u043c\u0430\u043d\u0434 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438) \n    8 \u0431\u0430\u0439\u0442  - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 sctp \u043a\u043e\u043c\u0430\u043d\u0434 \n    1 \u0431\u0430\u0439\u0442  - \u0424\u043b\u0430\u0433 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 1, \u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0431\u044b\u043b\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 sctp \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 0, \u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u0443\u0436\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430   \u041a\u043e\u0434:  0xa3  \u041a\u043e\u043c\u0430\u043d\u0434\u0430:  \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430  \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:  \u043d\u0435\u0442  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:  \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f  4 \u0431\u0430\u0439\u0442\u0430 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u0432\u0435\u0440\u0441\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c sctp \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430. (\u0441\u043f\u043e\u0441\u043e\u0431 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0441\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c)",
            "title": "\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b SCTP"
        },
        {
            "location": "/other/scs/",
            "text": "Common\n\n\nSCs-code - is a text representation of SC-code. Whole text consist of sentences, that\nseparated by \n;;\n symbols.\n\n\nYou can use C-style comments in SCs text:\n\n\n// one line comment\nfruit -> apple;\n/* Multiline\n * comment\n */\n\n\n\n\nTo make an sc-link into specified file you can use special type identifier:\n\n\n\"file://<file name>\"\n\n\n\n\n\n\n\"file://<file name>\"\n - is a relative path to a file. According to a file, where it used;\n\n\n\"file:///<file_name>\"\n - is an absolute path to a file.\n\n\n\n\nThere are some tricks with object names:\n\n\n\n\n...\n - is an unnamed object;\n\n\n_<object name>\n - all object names, that starts with symbol \n_\n represents a variable objects.\n\n\n\n\nObjects identifier visibility. By default all objects with name \nx\n are visible anywhere.\nAfter translating it into memory this object will have a \nsystem identifier\n equal to \nx\n.\nSo if you use \nx\n in different \nscs\n files, then you designate the same object in them\n(would be the same element in a knowledge base).\n\n\nSometimes you need to designate the same objects in different files, but do not generate a\n\nsystem identifier\n in memory for it. In this case you should to prefix it name with a \n.\n symbol.\nFor example: \n.x\n.\n\n\nIn case, when you need to make a named object just local for a \nscs\n file,\nthen you should to use \n..\n prefix (example: \n..x\n).\n\n\n\nSCs-code is splitted into levels. Each level allows to minimize number\nof string symbols to represent the same structures.\n\n\n\n\nSCs level 1\n\n\nSCs-code level 1 - is a simple representation of SC-code. It represents it\nwith just simple triples. Each triple contains \nsubject\n, \npredicate\n, \nobject\n\nthat are splitted by \n|\n symbol. Line \nsubject | predicate | object;;\n is a sentence.\n\n\nIdentifier of \nsubject\n, \npredicate\n, \nobject\n build with rule:\n\n\n<type>#<identifier>\n\n\n\n\nWhere \ntype\n - is an element type specification. It can be one of possible values:\n\n\n\n\nsc_node\n - equal to \n;\n\n\nsc_link\n - equal to \n;\n\n\nsc_edge_dcommon\n - equal to \n;\n\n\nsc_edge_ucommon\n - equal to \n;\n\n\nsc_edge_main\n - equal to \n;\n\n\nsc_edge_access\n - equal to \n.\n\n\n\n\n\n\n\nExamples\n\n\n\n  \n\n    \nSCg construction\n\n    \nEqual SCs-level 1 text\n\n  \n\n\n  \n\n    \n\n    \n\n      \n\n        \n\n// append set of apples into fruit set\nsc_node#fruit | sc_edge_main#... | sc_node#apple;;\n// append set of bananas into fruit set\nsc_node#fruit | sc_edge_main#... | sc_node#banana;;\n        \n\n      \n\n    \n\n  \n\n\n  \n\n    \n\n    \n\n      \n\n        \n\nsc_node#apple | sc_edge_dcommon#..e | \"file://apple.png\";;\n/*append edge from nrel_image relation into\n  edge between apple set and it's image*/\nsc_node#nrel_image | sc_edge_main#... | sc_edge_dcommon#..e;;\n        \n\n      \n\n    \n\n  \n\n\n\n\n\nSCs-level 1 allows you to represent any kind of SC-code construction. It's a low-level\nrepresentation and commonly used as a transport format, that is very simple for parsing.\n\n\nSCs level 2\n\n\nThis level of SCs-text add two new features:\n\n\n\n\nusing of extended alphabet of edges;\n\n\nusing of compound identifiers of an edges.\n\n\n\n\nOn this level you can make sentences by rule:\n\n\n<element> <edge> <element>;;\n\n\n\n\nWhere \n<edge>\n can be on of values:\n\n\n  \n\n    \nSCs\n\n    \nSCg equivalent\n\n  \n\n  \n\n    \n<\n or \n>\n\n    \n\n  \n\n  \n\n    \n<>\n\n    \n\n  \n\n  \n\n    \n<..\n or \n..>\n\n    \n\n  \n\n  \n\n    \n<=>\n\n    \n\n  \n\n  \n\n    \n_<=>\n\n    \n\n  \n\n  \n\n    \n<=\n or \n=>\n\n    \n\n  \n\n  \n\n    \n_<=\n or \n_=>\n\n    \n\n  \n\n  \n\n    \n<-\n or \n->\n\n    \n\n  \n\n  \n\n    \n_<-\n or \n_->\n\n    \n\n  \n\n  \n\n    \n<|-\n or \n-|>\n\n    \n\n  \n\n  \n\n    \n_<|-\n or \n_-|>\n\n    \n\n  \n\n  \n\n    \n</-\n or \n-/>\n\n    \n\n  \n\n  \n\n    \n_</-\n or \n_-/>\n\n    \n\n  \n\n  \n\n    \n<~\n or \n~>\n\n    \n\n  \n\n  \n\n    \n_<~\n or \n_~>\n\n    \n\n  \n\n  \n\n    \n<|~\n or \n~|>\n\n    \n\n  \n\n  \n\n    \n_<|~\n or \n_~|>\n\n    \n\n  \n\n  \n\n    \n</~\n or \n~/>\n\n    \n\n  \n\n  \n\n    \n_</~\n or \n_~/>\n\n    \n\n  \n\n\n\n\n\n\n\n\n  \n\n    \nSCg construction\n\n    \nEqual SCs-level 2 text\n\n  \n\n\n  \n\n    \n\n    \n\n      \n\n        \n\nfruit -> apple;;\n// backward direction\nbanana \n<\n- fruit;;\n        \n\n      \n\n    \n\n  \n\n\n\n\n\n\nCompound identifier of an edge builds as a sentence in SCs-level 2, but without\n\n;;\n separator and inside brackets \n()\n: \n(<element> <edge> <element>)\n.\nSo that allows to simplify usage of an edge as a source or target of another one.\n\n\n\n\n\nExamples\n\n\n\n  \n\n    \nSCg construction\n\n    \nEqual SCs-level 2 text\n\n  \n\n\n\n    \n\n    \n\n      \n\n        \n\nnrel_image -> (fruit => \"file://apple.png\");;\n        \n\n      \n\n    \n\n  \n\n\n\n    \n\n    \n\n      \n\n        \n\nd -> (c -> (a -> b));;\n        \n\n      \n\n    \n\n  \n\n\n\n    \n\n    \n\n      \n\n        \n\n(a -> b) -> (c <- d);;\n        \n\n      \n\n    \n\n  \n\n\n\n\n\nSCs level 3\n\n\nThis level of SCs-text allows to minimize symbols to represent constructions like this one:\n\n\n\nc -> (a -> b);;\n\n\n\n\nTo do that you should use sentence like this:\n\n\n<object> <edge> <attribute>: <object>\n\n\n\n\nFor this example it would be like this:\n\n\na -> c: b;;\n\n\n\n\nIn case, when output edge from \nc\n is an variable, then use \n::\n splitter instead of \n:\n:\n\n\na -> c:: b;;\n\n\n\n\nequal to:\n\n\nc _-> (a -> b);;\n\n\n\n\n\n\nNote\n: you can use \n:\n, \n::\n just to replace \n->\n or \n_->\n edges.\n\n\n\n\n\n\n\nExamples\n\n\n\n  \n\n    \nSCg construction\n\n    \nEqual SCs-level 3 text\n\n  \n\n\n\n    \n\n    \n\n      \n\n        \n\napple => nrel_image: \"file://apple.png\";;\n        \n\n      \n\n    \n\n  \n\n\n\n    \n\n    \n\n      \n\n        \nNote\n: it is possible to use any number of \n:\n, \n::\n in one sentence.\n      \n\n      \n\n        \n\na -> c: d:: b;;\n        \n\n      \n\n    \n\n  \n\n\n\n\nSCs level 4\n\n\nThis level of SCs-text allows to combine many setences with one element into one.\nFor that pupropses used ';' symbol. So if we have some sentences like:\n\n\nx -> y;;\nx <- z;;\nx => h: r;;\n\n\n\n\nThen using SCs level 4 we can write them like this:\n\n\nx -> y;\n  <- z;\n  => h: r;;\n\n\n\n\nAnother words, this level of SCs text, allows to use source element one time.\n\n\n\n\n\nExamples\n\n\n\n  \n\n    \nSCg construction\n\n    \nEqual SCs-level 4 text\n\n  \n\n\n\n    \n\n    \n\n      \n\n        \n\nfruit -> apple;\n      -> banana;;\n        \n\n      \n\n    \n\n  \n\n\n\n    \n\n    \n\n      \n\n        \n\na -> c: d: b;\n  -> e;\n  -> g: f;;\n        \n\n      \n\n    \n\n  \n\n\n\n\nSCs level 5\n\n\nSCs level 6",
            "title": "SCs language"
        },
        {
            "location": "/other/scs/#common",
            "text": "SCs-code - is a text representation of SC-code. Whole text consist of sentences, that\nseparated by  ;;  symbols.  You can use C-style comments in SCs text:  // one line comment\nfruit -> apple;\n/* Multiline\n * comment\n */  To make an sc-link into specified file you can use special type identifier:  \"file://<file name>\"   \"file://<file name>\"  - is a relative path to a file. According to a file, where it used;  \"file:///<file_name>\"  - is an absolute path to a file.   There are some tricks with object names:   ...  - is an unnamed object;  _<object name>  - all object names, that starts with symbol  _  represents a variable objects.   Objects identifier visibility. By default all objects with name  x  are visible anywhere.\nAfter translating it into memory this object will have a  system identifier  equal to  x .\nSo if you use  x  in different  scs  files, then you designate the same object in them\n(would be the same element in a knowledge base).  Sometimes you need to designate the same objects in different files, but do not generate a system identifier  in memory for it. In this case you should to prefix it name with a  .  symbol.\nFor example:  .x .  In case, when you need to make a named object just local for a  scs  file,\nthen you should to use  ..  prefix (example:  ..x ).  \nSCs-code is splitted into levels. Each level allows to minimize number\nof string symbols to represent the same structures.",
            "title": "Common"
        },
        {
            "location": "/other/scs/#scs-level-1",
            "text": "SCs-code level 1 - is a simple representation of SC-code. It represents it\nwith just simple triples. Each triple contains  subject ,  predicate ,  object \nthat are splitted by  |  symbol. Line  subject | predicate | object;;  is a sentence.  Identifier of  subject ,  predicate ,  object  build with rule:  <type>#<identifier>  Where  type  - is an element type specification. It can be one of possible values:   sc_node  - equal to  ;  sc_link  - equal to  ;  sc_edge_dcommon  - equal to  ;  sc_edge_ucommon  - equal to  ;  sc_edge_main  - equal to  ;  sc_edge_access  - equal to  .    Examples  \n   \n     SCg construction \n     Equal SCs-level 1 text \n   \n\n   \n     \n     \n       \n         \n// append set of apples into fruit set\nsc_node#fruit | sc_edge_main#... | sc_node#apple;;\n// append set of bananas into fruit set\nsc_node#fruit | sc_edge_main#... | sc_node#banana;;\n         \n       \n     \n   \n\n   \n     \n     \n       \n         \nsc_node#apple | sc_edge_dcommon#..e | \"file://apple.png\";;\n/*append edge from nrel_image relation into\n  edge between apple set and it's image*/\nsc_node#nrel_image | sc_edge_main#... | sc_edge_dcommon#..e;;\n         \n       \n     \n     SCs-level 1 allows you to represent any kind of SC-code construction. It's a low-level\nrepresentation and commonly used as a transport format, that is very simple for parsing.",
            "title": "SCs level 1"
        },
        {
            "location": "/other/scs/#scs-level-2",
            "text": "This level of SCs-text add two new features:   using of extended alphabet of edges;  using of compound identifiers of an edges.   On this level you can make sentences by rule:  <element> <edge> <element>;;  Where  <edge>  can be on of values: \n   \n     SCs \n     SCg equivalent \n   \n   \n     <  or  > \n     \n   \n   \n     <> \n     \n   \n   \n     <..  or  ..> \n     \n   \n   \n     <=> \n     \n   \n   \n     _<=> \n     \n   \n   \n     <=  or  => \n     \n   \n   \n     _<=  or  _=> \n     \n   \n   \n     <-  or  -> \n     \n   \n   \n     _<-  or  _-> \n     \n   \n   \n     <|-  or  -|> \n     \n   \n   \n     _<|-  or  _-|> \n     \n   \n   \n     </-  or  -/> \n     \n   \n   \n     _</-  or  _-/> \n     \n   \n   \n     <~  or  ~> \n     \n   \n   \n     _<~  or  _~> \n     \n   \n   \n     <|~  or  ~|> \n     \n   \n   \n     _<|~  or  _~|> \n     \n   \n   \n     </~  or  ~/> \n     \n   \n   \n     _</~  or  _~/> \n     \n      \n   \n     SCg construction \n     Equal SCs-level 2 text \n   \n\n   \n     \n     \n       \n         \nfruit -> apple;;\n// backward direction\nbanana  < - fruit;;\n         \n       \n     \n     \nCompound identifier of an edge builds as a sentence in SCs-level 2, but without ;;  separator and inside brackets  () :  (<element> <edge> <element>) .\nSo that allows to simplify usage of an edge as a source or target of another one.   Examples  \n   \n     SCg construction \n     Equal SCs-level 2 text \n    \n     \n     \n       \n         \nnrel_image -> (fruit => \"file://apple.png\");;\n         \n       \n     \n    \n     \n     \n       \n         \nd -> (c -> (a -> b));;\n         \n       \n     \n    \n     \n     \n       \n         \n(a -> b) -> (c <- d);;",
            "title": "SCs level 2"
        },
        {
            "location": "/other/scs/#scs-level-3",
            "text": "This level of SCs-text allows to minimize symbols to represent constructions like this one:  c -> (a -> b);;  To do that you should use sentence like this:  <object> <edge> <attribute>: <object>  For this example it would be like this:  a -> c: b;;  In case, when output edge from  c  is an variable, then use  ::  splitter instead of  : :  a -> c:: b;;  equal to:  c _-> (a -> b);;   Note : you can use  : ,  ::  just to replace  ->  or  _->  edges.   Examples  \n   \n     SCg construction \n     Equal SCs-level 3 text \n    \n     \n     \n       \n         \napple => nrel_image: \"file://apple.png\";;\n         \n       \n     \n    \n     \n     \n       \n         Note : it is possible to use any number of  : ,  ::  in one sentence.\n       \n       \n         \na -> c: d:: b;;",
            "title": "SCs level 3"
        },
        {
            "location": "/other/scs/#scs-level-4",
            "text": "This level of SCs-text allows to combine many setences with one element into one.\nFor that pupropses used ';' symbol. So if we have some sentences like:  x -> y;;\nx <- z;;\nx => h: r;;  Then using SCs level 4 we can write them like this:  x -> y;\n  <- z;\n  => h: r;;  Another words, this level of SCs text, allows to use source element one time.   Examples  \n   \n     SCg construction \n     Equal SCs-level 4 text \n    \n     \n     \n       \n         \nfruit -> apple;\n      -> banana;;\n         \n       \n     \n    \n     \n     \n       \n         \na -> c: d: b;\n  -> e;\n  -> g: f;;",
            "title": "SCs level 4"
        },
        {
            "location": "/other/scs/#scs-level-5",
            "text": "",
            "title": "SCs level 5"
        },
        {
            "location": "/other/scs/#scs-level-6",
            "text": "",
            "title": "SCs level 6"
        },
        {
            "location": "/license/",
            "text": "Unless otherwise indicated, Source Code is licensed under MIT license.\n\n\nCopyright (c) 2010-2017 OSTIS\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        },
        {
            "location": "/changelog/",
            "text": "v0.4.0\n\n\n\n\nAdd events support in Python scripts\n\n\nImprove Python scripts run\n\n\nAdd common libraries for a Python\n\n\nFix memory leaks in core\n\n\nImprove test logging\n\n\nImprove work with memory buffers\n\n\nCleanup API\n\n\nAdd support of python 3 code\n\n\nAdd \nScLockScope\n class\n\n\nImplement multithreaded python script run\n\n\nPass \ncpp_bridge\n into python script\n\n\nExtract \nScWaitEvent\n as a separated class from \nScWait\n\n\nSome fixes in template search\n\n\nMake log thread safe\n\n\nImplement \nScLink\n wrapper class\n\n\nAdd \nScBase64\n encode/decode functions\n\n\nAdd common templates generation (see \nsc_common_templ.hpp\n)\n\n\n\n\nv0.3.1\n\n\n\n\nFix templates search error (problems was with triples search order)\n\n\nImplement logging for load extension module problems\n\n\nRemove \nnl\n, \niot\n modules from kpm, because they are project specific (moved to a separate repo)\n\n\nAdd \nForEach\n function into template search result\n\n\nAdd \nForEachIter\n functions into \nScMemoryContext\n\n\nAdd \nScSet\n class\n\n\nAdd support of http requests\n\n\n\n\nv0.3.0\n\n\n\n\nImplement search for elements, that has no constancy flag in a type\n\n\nFix template search error (#251)\n\n\nFix problem with \nSC_ASSERT\n compilation in release mode (#249)\n\n\nImplement SCs-text parser (levels 1 - 4)\n\n\nAgent \nAApiAiParseUserTextAgent\n can run commands\n\n\nImplement common function to work with commands in knowledge base\n\n\nAdd support of keynode types in codegenerator. Now you can specify type of keynode that would be used to create it: \nForceCreate(ScType::Node...)\n\n\nRename module funcitons from \ninitialize\n, \nshutdown\n, \nload_priority\n to \nsc_module_initialize\n, \nsc_module_shutdown\n, \nsc_module_load_priority\n\n\nUpdate code to codestyle. Most functions was renamed from \nfunctionName\n to \nFunctionName\n. Iterator \nvalue\n function replaced with \nGet\n.\n\n\nImplement support of result codes for action agents\n\n\nImprove unit test system\n\n\nAdd \nMkDocs\n documentation generator support\n\n\nAdd \nclang-format\n config\n\n\nAdd codestyle document\n\n\nAdd documentation for \nC++\n API\n\n\nImplement multithreaded emit of sc-events\n\n\nImplement ref counter for sc-elements\n\n\nCover whole functionality of \nC++\n API by unit tests\n\n\nImplement \nC++\n API",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#v040",
            "text": "Add events support in Python scripts  Improve Python scripts run  Add common libraries for a Python  Fix memory leaks in core  Improve test logging  Improve work with memory buffers  Cleanup API  Add support of python 3 code  Add  ScLockScope  class  Implement multithreaded python script run  Pass  cpp_bridge  into python script  Extract  ScWaitEvent  as a separated class from  ScWait  Some fixes in template search  Make log thread safe  Implement  ScLink  wrapper class  Add  ScBase64  encode/decode functions  Add common templates generation (see  sc_common_templ.hpp )",
            "title": "v0.4.0"
        },
        {
            "location": "/changelog/#v031",
            "text": "Fix templates search error (problems was with triples search order)  Implement logging for load extension module problems  Remove  nl ,  iot  modules from kpm, because they are project specific (moved to a separate repo)  Add  ForEach  function into template search result  Add  ForEachIter  functions into  ScMemoryContext  Add  ScSet  class  Add support of http requests",
            "title": "v0.3.1"
        },
        {
            "location": "/changelog/#v030",
            "text": "Implement search for elements, that has no constancy flag in a type  Fix template search error (#251)  Fix problem with  SC_ASSERT  compilation in release mode (#249)  Implement SCs-text parser (levels 1 - 4)  Agent  AApiAiParseUserTextAgent  can run commands  Implement common function to work with commands in knowledge base  Add support of keynode types in codegenerator. Now you can specify type of keynode that would be used to create it:  ForceCreate(ScType::Node...)  Rename module funcitons from  initialize ,  shutdown ,  load_priority  to  sc_module_initialize ,  sc_module_shutdown ,  sc_module_load_priority  Update code to codestyle. Most functions was renamed from  functionName  to  FunctionName . Iterator  value  function replaced with  Get .  Implement support of result codes for action agents  Improve unit test system  Add  MkDocs  documentation generator support  Add  clang-format  config  Add codestyle document  Add documentation for  C++  API  Implement multithreaded emit of sc-events  Implement ref counter for sc-elements  Cover whole functionality of  C++  API by unit tests  Implement  C++  API",
            "title": "v0.3.0"
        },
        {
            "location": "/thirdparty/",
            "text": "Code generator\n\n\nBased on refactored code from: \nCPP-Reflection\n\n\nSc-memory\n\n\n\n\nJSON for Modern C++",
            "title": "Thirdparty"
        },
        {
            "location": "/thirdparty/#code-generator",
            "text": "Based on refactored code from:  CPP-Reflection",
            "title": "Code generator"
        },
        {
            "location": "/thirdparty/#sc-memory",
            "text": "JSON for Modern C++",
            "title": "Sc-memory"
        }
    ]
}